{"version":3,"sources":["jsmpeg.js","video-element.js","player.js","buffer.js","ajax.js","ajax-progressive.js","websocket.js","source-disp.js","ts.js","decoder.js","json-event.js","mjpeg.js","mpeg1.js","mp2.js","webgl.js","canvas2d.js","webaudio.js","crc.js"],"names":["JSMpeg","config","echoResponseTimeout","reconnectInterval","mjpegFrameInterval","mjpegTimeQueLength","mpeg1TimeQueLength","echoTimeQueLength","defaultSourceIndex","enableLog","infos","connectionId","videoMode","mjpegTime","mpeg1Time","upstreams","reports","onSourceConnected","source","this","log","conn_id","onHeartbeatReport","echo","callback","payload","res","bind","data","cmd","timestamp","Date","now","msg","getSources","forEach","sourcehost","URL","url","protocol","jsonPost","href","err","offset","parseInt","switchUpstream","name","sourceIndex","undefined","activeIndex","newName","index","upstream","active","getSource","send","JSON","stringify","handler","userId","userid","forceReconnect","socket","close","switchVideoMode","mode","req","param","title","console","sources","length","Math","min","max","window","video_objs","push","player","on_source_opened","floor","random","VideoElement","options","autoplay","send_cmd_active","on_intra_rendered","y","cr","cb","intra_time","current_connid","current_time","interval_time","intra_crc32","crc32","intra_interval","close_when_delay","timeQue","unshift","pop","on_mjpeg_rendered","renderTime","setTimeout","id","cname","ca","document","cookie","split","i","c","trim","indexOf","substring","get_cookie","cvalue","exdays","d","setTime","getTime","expires","toGMTString","set_cookie","replace","r","toString","Player","BitBuffer","Source","Demuxer","Decoder","Renderer","AudioOutput","CreateSingleVideo","elm","dataset","urlobj","location","Now","performance","Fill","array","value","fill","standardDeviation","values","average","reduce","sum","avg","avgSquareDiff","map","diff","ceil","sqrt","element","addStyles","styles","style","container","display","position","minWidth","minHeight","wh","canvas","createElement","width","height","appendChild","playButton","innerHTML","PLAY_BUTTON","zIndex","top","bottom","left","right","maxWidth","maxHeight","margin","opacity","cursor","option","parse","playerInstance","poster","decodeFirstFrame","Image","src","addEventListener","posterLoaded","onClick","audioOut","unlocked","unlockAudioElement","streaming","unmuteButton","UNMUTE_BUTTON","unlockAudioBound","onUnlockAudio","prototype","ev","preventDefault","stopPropagation","unlock","removeEventListener","isPlaying","pause","play","match","WebSocket","progressive","AjaxProgressive","Ajax","audio","maxAudioLag","loop","demuxer","TS","mjpeg","MJpeg","JsonMsg","dispatcher","Dispatch","connect","SOURCEID","SOURCE_MPEG1","SOURCE_MJPEG","SOURCE_JSON","video","MPEG1Video","renderer","disableGl","WebGL","IsSupported","Canvas2D","STREAM","VIDEO_1","WebAudio","MP2Audio","AUDIO_1","Object","defineProperty","get","getCurrentTime","set","setCurrentTime","getVolume","setVolume","unpauseOnShow","pauseWhenHidden","showHide","start","visibilityState","wantsToPlay","animationId","requestAnimationFrame","update","cancelAnimationFrame","canPlay","stop","seek","currentTime","send_deactive","volume","decode","destroy","time","startOffset","startTime","established","updateForStreaming","updateForStaticFile","renderProgress","progress","decoded","enqueuedTime","resetEnqueuedTime","enabled","notEnoughData","headroom","decodedTime","targetTime","lateTime","frameTime","frameRate","resume","completed","bufferOrLength","bytes","Uint8Array","byteLength","MODE","EXPAND","resize","size","newBytes","evict","sizeNeeded","bytePos","available","copyWithin","subarray","write","buffers","isArrayOfBuffers","totalLength","newSize","appendSingleBuffer","buffer","findNextStartCode","findStartCode","code","current","nextBytesAreStartCode","peek","count","currentByte","remaining","read","shift","skip","rewind","has","EVICT","AjaxSource","destination","request","XMLHttpRequest","onreadystatechange","readyState","DONE","status","onLoad","response","onprogress","onProgress","open","responseType","secondsHeadroom","abort","loaded","total","AjaxProgressiveSource","fileSize","loadedSize","chunkSize","isLoading","loadStartTime","throttled","aborted","getResponseHeader","loadNextChunk","loadTime","end","onChunkLoad","loadFails","setRequestHeader","WSSource","callbacks","shouldAttemptReconnect","reconnectTimeoutId","clearTimeout","protocols","binaryType","onmessage","onMessage","onopen","onOpen","onerror","onClose","onclose","getReconnectInterval","timeout","xhr","e","onload","responseText","SourceDisp","distList","sourceId","DataView","getUint16","bits","leftoverBytes","guessVideoFrameEnd","pidsToStreamIds","pesPacketInfo","streamId","currentLength","pts","parsePacket","leftoverCount","resync","payloadStart","pid","adaptationField","pi","packetComplete","adaptationFieldLength","packetLength","ptsDtsFlag","headerLength","payloadBeginIndex","p32_30","p29_15","p14_0","payloadLength","packetStart","complete","packetAddData","hasPadding","byteIndex","foundSync","j","warn","PACK_HEADER","SYSTEM_HEADER","PROGRAM_MAP","PRIVATE_1","PADDING","PRIVATE_2","DIRECTORY","Base","BaseDecoder","collectTimestamps","timestamps","timestampIndex","ts","advanceDecodedTime","seconds","newTimestampIndex","nodes","newest_image","begintime","image","oldWidth","oldHeight","newWidth","newHeight","renderJpeg","jpgEncode","input","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","output","Number","NaN","isNaN","charAt","MPEG1","call","bufferSize","videoBufferSize","bufferMode","customIntraQuantMatrix","customNonIntraQuantMatrix","blockData","Int32Array","currentFrame","create","constructor","hasSequenceHeader","START","SEQUENCE","decodeSequenceHeader","PICTURE","decodePicture","readHuffman","codeTable","state","PICTURE_RATE","initBuffers","ZIG_ZAG","intraQuantMatrix","idx","nonIntraQuantMatrix","DEFAULT_INTRA_QUANT_MATRIX","DEFAULT_NON_INTRA_QUANT_MATRIX","mbWidth","mbHeight","mbSize","codedWidth","codedHeight","codedSize","halfWidth","halfHeight","currentY","Uint8ClampedArray","currentY32","Uint32Array","currentCr","currentCr32","currentCb","currentCb32","forwardY","forwardY32","forwardCr","forwardCr32","forwardCb","forwardCb32","pictureType","fullPelForward","forwardFCode","forwardRSize","forwardF","skipOutput","PICTURE_TYPE","B","PREDICTIVE","EXTENSION","USER_DATA","SLICE_FIRST","SLICE_LAST","decodeSlice","render","INTRA","tmpY","tmpY32","tmpCr","tmpCr32","tmpCb","tmpCb32","quantizerScale","sliceBegin","slice","macroblockAddress","motionFwH","motionFwHPrev","motionFwV","motionFwVPrev","dcPredictorY","dcPredictorCr","dcPredictorCb","decodeMacroblock","mbRow","mbCol","macroblockType","macroblockIntra","macroblockMotFw","increment","t","MACROBLOCK_ADDRESS_INCREMENT","copyMacroblock","mbTable","MACROBLOCK_TYPE","decodeMotionVectors","cbp","CODE_BLOCK_PATTERN","block","mask","decodeBlock","MOTION","abs","motionH","motionV","sY","sCr","sCb","scan","H","V","oddH","oddV","dest","last","x","y1","y2","cr1","cr2","cb1","cb2","dY","dCb","dCr","quantMatrix","n","predictor","dctSize","DCT_DC_SIZE_LUMINANCE","DCT_DC_SIZE_CHROMINANCE","differential","destArray","destIndex","level","run","coeff","DCT_COEFF","dezigZagged","PREMULTIPLIER_MATRIX","CopyValueToDestination","IDCT","CopyBlockToDestination","AddValueToDestination","AddBlockToDestination","b1","b3","b4","b6","b7","tmp1","tmp2","m0","x0","x1","x2","x3","x4","y3","y4","y5","y6","y7","Int16Array","MACROBLOCK_TYPE_INTRA","Int8Array","MACROBLOCK_TYPE_PREDICTIVE","MACROBLOCK_TYPE_B","MP2","audioBufferSize","Float32Array","sampleRate","D","SYNTHESIS_WINDOW","U","VPos","allocation","Array","scaleFactorInfo","scaleFactor","sample","pos","decodeFrame","sync","version","layer","hasCRC","FRAME_SYNC","VERSION","MPEG_1","LAYER","II","bitrateIndex","sampleRateIndex","SAMPLE_RATE","MPEG_2","padding","bound","JOINT_STEREO","MONO","frameSize","BIT_RATE","tab3","sblimit","tab1","tab2","QUANT_LUT_STEP_1","QUANT_LUT_STEP_2","sb","readAllocation","channels","ch","sf","outPos","part","granule","readSamples","p","MatrixTransform","dIndex","vIndex","outChannel","tab4","QUANT_LUT_STEP_3","qtab","QUANT_LUT_STEP4","QUANT_TAB","q","val","SCALEFACTOR_BASE","adj","levels","group","scale","s","ss","dp","t01","t02","t03","t04","t05","t06","t07","t08","t09","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","t20","t21","t22","t23","t24","t25","t26","t27","t28","t29","t30","t31","t32","t33","MPEG_2_5","III","I","STEREO","DUAL_CHANNEL","Uint16Array","A","C","WebGLRenderer","contextCreateOptions","preserveDrawingBuffer","alpha","depth","stencil","antialias","gl","getContext","Error","vertexAttr","vertexBuffer","createBuffer","vertexCoords","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","program","createProgram","SHADER","VERTEX_IDENTITY","FRAGMENT_YCRCB_TO_RGBA","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","textureY","createTexture","textureCb","textureCr","loadingProgram","FRAGMENT_LOADING","shouldCreateUnclampedViews","allowsClampedTextureData","deleteTexture","deleteProgram","deleteBuffer","useProgram","viewport","texture","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","uniform1i","getUniformLocation","vsh","fsh","attachShader","compileShader","VERTEX_SHADER","FRAGMENT_SHADER","linkProgram","type","shader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","texImage2D","LUMINANCE","UNSIGNED_BYTE","getError","loc","uniform1f","drawArrays","TRIANGLE_STRIP","w","h","w2","h2","updateTexture","TEXTURE0","TEXTURE1","TEXTURE2","imageProgram","FRAGMENT_IMAGE","textureImage","imageUniform","updateTextureImage","unit","activeTexture","RGBA","WebGLRenderingContext","join","CanvasRenderer","context","imageData","getImageData","ctx","fillStyle","fillRect","YCbCrToRGBA","putImageData","drawImage","rgba","ccb","ccr","g","b","yIndex1","yIndex2","yNext2Lines","cIndex","cNextLine","rgbaIndex1","rgbaIndex2","rgbaNext2Lines","cols","rows","row","col","WebAudioOut","CachedContext","AudioContext","webkitAudioContext","gain","createGain","_connections","wallclockStartTime","NeedsUnlocking","getEnqueuedTime","disconnect","getChannelData","createBufferSource","duration","unlockCallback","checkIfUnlocked","attempt","playbackState","PLAYING_STATE","FINISHED_STATE","test","navigator","userAgent","root","JS_CRC_NO_NODE_JS","process","versions","node","global","k","COMMON_JS","JS_CRC_NO_COMMON_JS","module","exports","AMD","define","amd","JS_CRC_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","Modules","polynom","initValue","m","method","message","crc","table","notString","charCodeAt","hex"],"mappings":"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A,IAAAkE,YACA,EAAA,EAAA,EACA,EAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,GAAA,GAAA,EACA,IAAA,GAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,GAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,GAAA,IAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,GACA,EAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,I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,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,EAAA,EAAA,IACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,EAAA,EAAA,IACA,GAAA,GAAA,EACA,EAAA,EAAA,EACA,EAAA,EAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,GAAA,GAAA,EACA,EAAA,EAAA,KACA,GAAA,GAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,MACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,GAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,KACA,EAAA,EAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,IACA,EAAA,EAAA,EACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,GACA,EAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,EAAA,EAAA,KACA,IAAA,IAAA,EACA,EAAA,EAAA,IACA,IAAA,IAAA,EACA,EAAA,EAAA,IACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,KACA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAAA,IACA,EAAA,EAAA,KACA,EAAA,EAAA,IACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA,IAAA,IAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,IAAA,IAAA,EACA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","file":"jsmpeg.min.js","sourcesContent":["var JSMpeg = \n{\n\t//======================================================//\n\t// \tinterface \n\t//======================================================//\n\n\tconfig: {\n\t\techoResponseTimeout: 3000,\n\t\treconnectInterval: 3000,\n\t\tmjpegFrameInterval: 1000,\n\t\tmjpegTimeQueLength: 50,\n\t\tmpeg1TimeQueLength: 50,\n\t\techoTimeQueLength: 50,\n\t\tdefaultSourceIndex: 0,\n\t\tenableLog: true\n\t},\n\n\tinfos : {\n\t\tconnectionId: 0,\n\t\tvideoMode : 'mpeg1',\n\t\tmjpegTime : [],\n\t\tmpeg1Time : [],\n\t\tupstreams : null,\n\t\treports: null\n\t},\n\n\tonSourceConnected: function( source ) {this.log('connected:', source.conn_id);},\n\tonHeartbeatReport: function( reports ) {this.log('heartbeat:', reports);},\n\n\techo: function( callback, payload )\n\t{\n\t\tcallback = callback? callback : function(res){\n\t\t\tthis.log('echo:', res);\n\t\t}.bind(this);\n\n\t\tvar data = {\n\t\t\tcmd: 'echo',\n\t\t\ttimestamp: Date.now(),\n\t\t\tpayload: payload? payload : {msg: 'no payload'}\n\t\t};\n\t\tthis.getSources().forEach( function(source) {\n\t\t\tvar sourcehost = new URL(source.url);\n\t\t\tsourcehost.protocol = 'http';\n\t\t\tsource.jsonPost(sourcehost.href+'manager/echo', data, function(err, res){\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (res.timestamp) {\n\t\t\t\t\tvar offset = Date.now() - parseInt(res.timestamp);\n\t\t\t\t\tcallback( null, offset );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tcallback('unknowErr');\n\t\t\t}, this.config.echoResponseTimeout);\n\t\t}.bind(this));\n\t},\n\n\tswitchUpstream: function( name, sourceIndex )\n\t{\n\t\tif (!this.infos.upstreams) {\n\t\t\tthis.log('has no upstreams');\n\t\t\treturn;\n\t\t}\n\n\t\tif ( name === undefined ) {\n\t\t\tvar activeIndex = -1;\n\t\t\tvar newName = null;\n\t\t\tfor ( var index in this.infos.upstreams ) {\n\t\t\t\tvar upstream = this.infos.upstreams[ index ]; \n\t\t\t\tif ( upstream.active ) {\n\t\t\t\t\tactiveIndex = index;\n\t\t\t\t} else {\n\t\t\t\t\tif (activeIndex >= 0) {\n\t\t\t\t\t\tnewName || (newName = upstream.name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( name ) {\n\t\t\t\tthis.log('the input upstream name is invalid');\n\t\t\t}\n\n\t\t\tif ( newName ) {\n\t\t\t\tname = newName;\n\t\t\t} else {\n\t\t\t\tname = this.infos.upstreams[0].name;\n\t\t\t}\n\t\t}\n\n\t\tvar nameValid = false;\n\n\t\tfor ( var index in this.infos.upstreams ) {\n\t\t\tvar upstream = this.infos.upstreams[ index ]; \n\n\t\t\tif ( upstream.name != name ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( upstream.active ) {\n\t\t\t\tthis.log('no need to change upstream');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tnameValid = true;\n\t\t\tbreak;\n\t\t}\n\n\t\tvar source = this.getSource( sourceIndex );\n\n\t\tif ( !source ) {\n\t\t\tthis.log( 'no source found');\n\t\t}\n\n\t\tsource.send(JSON.stringify({\n\t\t\thandler: 'manager',\n\t\t\tuserId: this.userid(),\n\t\t\tcmd: 'switchUpstream',\n\t\t\tname: name\n\t\t}));\n\n\t\treturn name;\n\t},\n\n\tforceReconnect: function () \n\t{\n\t\tthis.getSources().forEach( function(source) {\n\t\t\tsource.forceReconnect = true;\n\t\t\tsource.socket.close();\n\t\t});\n\t},\n\n\tswitchVideoMode: function (mode) \n\t{\n\t\tmode = mode? mode: ((this.infos.videoMode==='mpeg1')? 'mjpeg' : 'mpeg1');\n\n\t\tthis.getSources().forEach( function(source) {\n\t\t\tvar req = {\n\t\t\t\thandler: mode,\n\t\t\t\tuserId: this.userid(),\n\t\t\t\tcmd: 'active',\n\t\t\t\tparam: true\n\t\t\t};\n\n\t\t\tswitch (mode) {\n\t\t\t\tcase 'mpeg1':\n\t\t\t\t\tsource.send(JSON.stringify(req));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'mjpeg':\n\t\t\t\t\tsource.send(JSON.stringify(req));\n\n\t\t\t\t\treq.handler = 'mpeg1';\n\t\t\t\t\treq.param = false;\n\t\t\t\t\tsource.send(JSON.stringify(req));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.log('error mode: ', mode);\n\t\t\t}\n\n\t\t\tthis.infos.videoMode = mode;\n\t\t}.bind(this));\n\t},\n\n\t//======================================================//\n\t// \tdo not edit the code below\n\t//======================================================//\n\n\tlog: function(title, msg)\n\t{\n\t\tthis.config.enableLog && console.log(title, msg);\n\t},\n\n\tgetSource: function( index )\n\t{\n\t\tvar sources = this.getSources();\n\t\tif (sources.length === 0) {\n\t\t\treturn null; \n\t\t}\n\n\t\tif ( index === undefined ) {\n\t\t\tindex = this.config.defaultSourceIndex;\n\t\t}\n\n\t\tindex = Math.min( index, sources.length -1 );\n\t\tindex = Math.max( index, 0 );\n\n\t\treturn sources[ index ];\n\t},\n\n\tgetSources: function () \n\t{\n\t\tvar sources = [];\n\t\tfor (var index in window.video_objs) {\n\t\t\tsources.push( window.video_objs[index].player.source );\n\t\t}\n\t\treturn sources;\n\t},\n\n\ton_source_opened: function (source) \n\t{\n\t\tvar config = this.config;\t\n\t\tvar infos = this.infos;\t\n\n\t\tsource.conn_id = Math.floor(Math.random() * 1000);\n\t\tinfos.connectionId = source.conn_id;\n\t\tinfos.mjpegTime.length = 0;\n\t\tinfos.mpeg1Time.length = 0;\n\n\t\tif(this.VideoElement.player.options.autoplay) {\n\t\t\tsource.send_cmd_active(true);\n\t\t}\n\n\t\tthis.onSourceConnected( source );\n\t},\n\n\ton_intra_rendered: function (y, cr, cb, source) \n\t{\n\t\tif (typeof window.intra_time === 'undefined') {\n\t\t\twindow.intra_time = 0;\n\t\t\twindow.conn_id = 0;\n\t\t}\n\n\t\tvar current_connid = source.conn_id;\n\t\tvar current_time = Date.now();\n\t\tvar interval_time = current_time - window.intra_time;\n\t\twindow.intra_time = current_time;\n\n\t\tif (window.conn_id !== current_connid) {\n\t\t\twindow.conn_id = current_connid; \n\t\t\treturn;\n\t\t}\n\n\t\tvar payload = {\n\t\t\thandler: 'mpeg1',\n\t\t\tcmd: 'intra',\n\t\t\tuserId: this.userid(),\n\t\t\tintra_crc32 : crc32(cb),\n\t\t\tintra_interval : interval_time,\n\t\t\tclose_when_delay : 0\n\t\t};\n\n\t\tvar timeQue = this.infos.mpeg1Time;\n\t\ttimeQue.unshift(interval_time);\n\t\tif (timeQue.length > this.config.mpeg1TimeQueLength) {\n\t\t\ttimeQue.pop();\n\t\t}\n\n\t\tsource.send(JSON.stringify(payload));\n\t\t//this.log('intra_frame_calback:', payload.intra_crc32, payload.intra_interval);\n\t},\n\n\ton_mjpeg_rendered: function (source, renderTime) \n\t{\n\t\tif (this.infos.videoMode === 'mjpeg') {\n\t\t\tsetTimeout(function(){\n\t\t\t\tsource.send(JSON.stringify({\n\t\t\t\t\tuserId: this.userid(),\n\t\t\t\t\thandler: 'mjpeg',\n\t\t\t\t\tcmd: 'interval',\n\t\t\t\t\trenderTime: renderTime,\n\t\t\t\t}));\n\t\t\t}.bind(this), this.config.mjpegFrameInterval);\n\t\t}\n\n\t\tvar timeQue = this.infos.mjpegTime;\n\t\ttimeQue.unshift(renderTime);\n\t\tif (timeQue.length > this.config.mjpegTimeQueLength) {\n\t\t\ttimeQue.pop();\n\t\t}\n\t},\n\n\tuserid: function ()\n\t{\n\t\tfunction set_cookie(cname,cvalue,exdays)\n\t\t{\n\t\t\tvar d = new Date();\n\t\t\td.setTime(d.getTime()+(exdays*24*60*60*1000));\n\t\t\tvar expires = \"expires=\"+d.toGMTString();\n\t\t\tdocument.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n\t\t}\n\n\t\tfunction get_cookie(cname)\n\t\t{\n\t\t\tvar name = cname + \"=\";\n\t\t\tvar ca = document.cookie.split(';');\n\t\t\tfor(var i=0; i<ca.length; i++) \n\t\t\t{\n\t\t\t\tvar c = ca[i].trim();\n\t\t\t\tif (c.indexOf(name)==0) return c.substring(name.length,c.length);\n\t\t\t}\n\t\t\treturn \"\";\n\t\t}\n\n\t\tvar id = get_cookie('id');\n\t\tif (id === '') {\n\t\t\tid = 'xxyxxyxxyxxyxxyx'.replace(/[xy]/g, function(c) {\n\t\t\t\tvar r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);\n\t\t\t\treturn v.toString(16);\n\t\t\t});\n\n\t\t\tset_cookie('id', id, 365);\n\t\t}\n\t\treturn id;\n\t},\n\n\tPlayer: null,\n\tVideoElement: null,\n\tBitBuffer: null,\n\tSource: {}, \n\tDemuxer: {},\n\tDecoder: {},\n\tRenderer: {},\n\tAudioOutput: {}, \n\n\tCreateSingleVideo: function(elm, url, res) {\n\t\tif( !url ) {\n\t\t\turl = elm.dataset.url;\n\t\t\tif ( !url ) {\n\t\t\t\tvar urlobj = new URL(document.location.href);\n\t\t\t\turlobj.protocol = \"ws\";\n\t\t\t\turl = urlobj.href\n\t\t\t}\n\t\t}\n\t\telm.dataset.url = url;\n\t\tthis.VideoElement = new JSMpeg.VideoElement(elm, res);\n\t\twindow.video_objs = [ this.VideoElement ];\n\t},\n\n\t/*\n\tCreateVideoElements: function() {\n\t\twindow.video_objs = [];\n\t\tvar elements = document.querySelectorAll('.jsmpeg');\n\t\tfor (var i = 0; i < elements.length; i++) {\n\t\t\tvar url = elements[i].dataset.url;\n\n\t\t\tif (!url) {\n\t\t\t\tif (document.location.port) {\n\t\t\t\t\turl = 'ws://'+document.location.hostname+':'+document.location.port;\n\t\t\t\t} else {\n\t\t\t\t\turl = 'ws://'+document.location.hostname;\n\t\t\t\t}\n\t\t\t} else if (/^\\d+$/.test(url)) {\n\t\t\t\turl = 'ws://'+document.location.hostname+':'+url;\n\t\t\t}\n\n\t\t\telements[i].dataset.url = url;\n\t\t\tvar video_obj = new JSMpeg.VideoElement(elements[i]);\n\t\t\twindow.video_objs.push(video_obj);\n\t\t}\n\t},\n\t*/\n\n\tNow: function() {\n\t\treturn window.performance \n\t\t\t? window.performance.now() / 1000\n\t\t\t: Date.now() / 1000;\n\t},\n\n\tFill: function(array, value) {\n\t\tif (array.fill) {\n\t\t\tarray.fill(value);\n\t\t}\n\t\telse {\n\t\t\tfor (var i = 0; i < array.length; i++) {\n\t\t\t\tarray[i] = value;\n\t\t\t}\n\t\t}\n\t},\n\n\tstandardDeviation: function (values) {\n\t\tvar average = function (data) {\n\t\t\tvar sum = data.reduce(function (sum, value) { return sum + value; }, 0);\n\t\t\tvar avg = sum / data.length;\n\t\t\treturn avg;\n\t\t};\n\n\t\tvar avg = average(values);\n\t\tvar avgSquareDiff = average(values.map(function (value) {\n\t\t\tvar diff = value - avg;\n\t\t\tvar sqrDiff = diff * diff;\n\t\t\treturn sqrDiff;\n\t\t}));\n\n\t\treturn Math.ceil(Math.sqrt(avgSquareDiff));\n\t},\n\n\n};\n","JSMpeg.VideoElement = (function(){ \"use strict\";\n\nvar VideoElement = function(element, res) {\t\n\tvar url = element.dataset.url;\n\n\tif(!res) {\n\t\tres = '1280x720';\n\t}\n\n\tif (!url) {\n\t\tthrow (\"VideoElement has no `data-url` attribute\");\n\t}\n\n\t// Setup the div container, canvas and play button\n\tvar addStyles = function(element, styles) {\n\t\tfor (var name in styles) {\n\t\t\telement.style[name] = styles[name];\n\t\t}\n\t};\n\n\tthis.container = element;\n\taddStyles(this.container, {\n\t\tdisplay: 'block',\n\t\tposition: 'relative',\n\t\tminWidth: '80px', minHeight: '80px'\n\t});\n\n\tvar wh = res.split(\"x\")\n\tthis.canvas = document.createElement('canvas');\n\tthis.canvas.width = wh[0];\n\tthis.canvas.height = wh[1];\n\taddStyles(this.canvas, {\n\t\tdisplay: 'block',\n\t\twidth: '100%'\n\t});\n\tthis.container.appendChild(this.canvas);\n\n\tthis.playButton = document.createElement('div');\n\tthis.playButton.innerHTML = VideoElement.PLAY_BUTTON;\n\taddStyles(this.playButton, {\n\t\tzIndex: 2, position: 'absolute',\n\t\ttop: '0', bottom: '0', left: '0', right: '0',\n\t\tmaxWidth: '75px', maxHeight: '75px',\n\t\tmargin: 'auto',\n\t\topacity: '0.7',\n\t\tcursor: 'pointer'\n\t});\n\tthis.container.appendChild(this.playButton);\t\n\n\t// Parse the data-options - we try to decode the values as json. This way\n\t// we can get proper boolean and number values. If JSON.parse() fails,\n\t// treat it as a string.\n\tvar options = {canvas: this.canvas};\n\tfor (var option in element.dataset) {\n\t\ttry {\n\t\t\toptions[option] = JSON.parse(element.dataset[option]);\n\t\t}\n\t\tcatch(err) {\n\t\t\toptions[option] = element.dataset[option];\n\t\t}\n\t}\n\n\t// Create the player instance\n\tthis.player = new JSMpeg.Player(url, options);\n\telement.playerInstance = this.player;\n\n\t// Setup the poster element, if any\n\t//if (options.poster && !options.autoplay && !this.player.options.streaming) {\n\t//streaming is now pausable\n\tif (options.poster && !options.autoplay) {\n\t\toptions.decodeFirstFrame = false;\n\t\tthis.poster = new Image();\n\t\tthis.poster.src = options.poster;\n\t\tthis.poster.addEventListener('load', this.posterLoaded)\n\t\taddStyles(this.poster, {\n\t\t\tdisplay: 'block', zIndex: 1, position: 'absolute',\n\t\t\twidth: '100%', height: '100%',\n\t\t\ttop: 0, left: 0, bottom: 0, right: 0\n\t\t});\n\t\tthis.container.appendChild(this.poster);\n\t}\n\n\t// Add the click handler if this video is pausable\n\t// if (!this.player.options.streaming) { // }\n\tthis.container.addEventListener('click', this.onClick.bind(this));\n\n\t// Hide the play button if this video immediately begins playing\n\t//if (options.autoplay || this.player.options.streaming) {\n\tif (options.autoplay)  {\n\t\tthis.playButton.style.display = 'none';\n\t}\n\n\t// Set up the unlock audio buton for iOS devices. iOS only allows us to \n\t// play audio after a user action has initiated playing. For autoplay or \n\t// streaming players we set up a muted speaker icon as the button. For all\n\t// others, we can simply use the play button.\n\tif (this.player.audioOut && !this.player.audioOut.unlocked) {\n\t\tvar unlockAudioElement = this.container;\n\n\t\tif (options.autoplay || this.player.options.streaming) {\n\t\t\tthis.unmuteButton = document.createElement('div');\n\t\t\tthis.unmuteButton.innerHTML = VideoElement.UNMUTE_BUTTON;\n\t\t\taddStyles(this.unmuteButton, {\n\t\t\t\tzIndex: 2, position: 'absolute',\n\t\t\t\tbottom: '10px', right: '20px',\n\t\t\t\twidth: '75px', height: '75px',\n\t\t\t\tmargin: 'auto',\n\t\t\t\topacity: '0.7',\n\t\t\t\tcursor: 'pointer'\t\t\t\t\n\t\t\t});\n\t\t\tthis.container.appendChild(this.unmuteButton);\n\t\t\tunlockAudioElement = this.unmuteButton;\n\t\t}\n\n\t\tthis.unlockAudioBound = this.onUnlockAudio.bind(this, unlockAudioElement);\n\t\tunlockAudioElement.addEventListener('touchstart', this.unlockAudioBound, false);\n\t\tunlockAudioElement.addEventListener('click', this.unlockAudioBound, true);\n\t}\n};\n\nVideoElement.prototype.onUnlockAudio = function(element, ev) {\n\tif (this.unmuteButton) {\n\t\tev.preventDefault();\n\t\tev.stopPropagation();\n\t}\n\tthis.player.audioOut.unlock(function(){\n\t\tif (this.unmuteButton) {\n\t\t\tthis.unmuteButton.style.display = 'none';\n\t\t}\n\t\telement.removeEventListener('touchstart', this.unlockAudioBound);\n\t\telement.removeEventListener('click', this.unlockAudioBound);\n\t}.bind(this));\n};\n\nVideoElement.prototype.onClick = function(ev) {\n\tif (this.player.isPlaying) {\n\t\tthis.player.pause();\n\t\tthis.playButton.style.display = 'block';\n\t}\n\telse {\n\t\tthis.player.play();\n\t\tthis.playButton.style.display = 'none';\n\t\tif (this.poster) {\n\t\t\tthis.poster.style.display = 'none';\n\t\t}\n\t}\n};\n\nVideoElement.PLAY_BUTTON = \n\t'<svg style=\"max-width: 75px; max-height: 75px;\" ' +\n\t\t'viewBox=\"0 0 200 200\" alt=\"Play video\">' +\n\t\t'<circle cx=\"100\" cy=\"100\" r=\"90\" fill=\"none\" '+\n\t\t\t'stroke-width=\"15\" stroke=\"#fff\"/>' +\n\t\t'<polygon points=\"70, 55 70, 145 145, 100\" fill=\"#fff\"/>' +\n\t'</svg>';\n\nVideoElement.UNMUTE_BUTTON = \n\t'<svg style=\"max-width: 75px; max-height: 75px;\" viewBox=\"0 0 75 75\">' +\n\t\t'<polygon class=\"audio-speaker\" stroke=\"none\" fill=\"#fff\" '+\n\t\t\t'points=\"39,13 22,28 6,28 6,47 21,47 39,62 39,13\"/>' +\n\t\t'<g stroke=\"#fff\" stroke-width=\"5\">' +\n\t\t\t'<path d=\"M 49,50 69,26\"/>' +\n\t\t\t'<path d=\"M 69,50 49,26\"/>' +\n\t\t'</g>' +\n\t'</svg>';\n\nreturn VideoElement;\n\n})();\n\n","JSMpeg.Player = (function(){ \"use strict\";\n\nvar Player = function(url, options) {\n\tthis.options = options || {};\n\n\tif (options.source) {\n\t\tthis.source = new options.source(url, options);\n\t\toptions.streaming = !!this.source.streaming;\n\t}\n\telse if (url.match(/^wss?:\\/\\//)) {\n\t\tthis.source = new JSMpeg.Source.WebSocket(url, options);\n\t\toptions.streaming = true;\n\t}\n\telse if (options.progressive !== false) {\n\t\tthis.source = new JSMpeg.Source.AjaxProgressive(url, options);\n\t\toptions.streaming = false;\n\t}\n\telse {\n\t\tthis.source = new JSMpeg.Source.Ajax(url, options);\n\t\toptions.streaming = false;\n\t}\n\n\toptions.audio = options.audio || false;\n\n\tthis.maxAudioLag = options.maxAudioLag || 0.25;\n\tthis.loop = options.loop !== false;\n\t//this.autoplay = !!options.autoplay || options.streaming;\n\tthis.autoplay = !!options.autoplay;\n\n\tthis.demuxer = new JSMpeg.Demuxer.TS(options);\n\tthis.mjpeg = new JSMpeg.Decoder.MJpeg(options);\n\tthis.JsonMsg = new JSMpeg.Decoder.JsonMsg(options);\n\tthis.dispatcher = new JSMpeg.Source.Dispatch(options);\n\n\tthis.source.connect(this.dispatcher);\n\tthis.dispatcher.connect(JSMpeg.Source.Dispatch.SOURCEID.SOURCE_MPEG1, this.demuxer);\n\tthis.dispatcher.connect(JSMpeg.Source.Dispatch.SOURCEID.SOURCE_MJPEG, this.mjpeg);\n\tthis.dispatcher.connect(JSMpeg.Source.Dispatch.SOURCEID.SOURCE_JSON, this.JsonMsg);\n\n\tif (options.video !== false) {\n\t\tthis.video = new JSMpeg.Decoder.MPEG1Video(options);\n\t\tthis.video.source = this.source;\n\t\tthis.mjpeg.source = this.source;\n\t\tthis.JsonMsg.source = this.source;\n\n\t\tthis.renderer = !options.disableGl && JSMpeg.Renderer.WebGL.IsSupported()\n\t\t\t? new JSMpeg.Renderer.WebGL(options)\n\t\t\t: new JSMpeg.Renderer.Canvas2D(options);\n\t\tthis.demuxer.connect(JSMpeg.Demuxer.TS.STREAM.VIDEO_1, this.video);\n\t\tthis.video.connect(this.renderer);\n\t\tthis.mjpeg.connect(this.renderer);\n\t}\n\n\tif (options.audio !== false && JSMpeg.AudioOutput.WebAudio.IsSupported()) {\n\t\tthis.audio = new JSMpeg.Decoder.MP2Audio(options);\n\t\tthis.audioOut = new JSMpeg.AudioOutput.WebAudio(options);\n\t\tthis.demuxer.connect(JSMpeg.Demuxer.TS.STREAM.AUDIO_1, this.audio);\n\t\tthis.audio.connect(this.audioOut);\n\t}\n\n\tObject.defineProperty(this, 'currentTime', {\n\t\tget: this.getCurrentTime,\n\t\tset: this.setCurrentTime\n\t});\n\tObject.defineProperty(this, 'volume', {\n\t\tget: this.getVolume,\n\t\tset: this.setVolume\n\t});\n\n\tthis.unpauseOnShow = false;\n\tif (options.pauseWhenHidden !== false) {\n\t\tdocument.addEventListener('visibilitychange', this.showHide.bind(this));\n\t}\n\n\tthis.source.start();\n\n\tif (this.autoplay) {\n\t\tthis.play();\n\t}\n\tJSMpeg.log(\"player option\", options);\n};\n\nPlayer.prototype.showHide = function(ev) {\n\tif (document.visibilityState === 'hidden') {\n\t\tthis.unpauseOnShow = this.wantsToPlay;\n\t\tthis.pause();\n\t}\n\telse if (this.unpauseOnShow) {\n\t\tthis.play();\n\t}\n};\n\nPlayer.prototype.play = function(ev) {\n\tthis.animationId = requestAnimationFrame(this.update.bind(this));\n\tthis.wantsToPlay = true;\n\tif(typeof this.source.send_cmd_active === 'function') {\n\t\tthis.source.send_cmd_active(true);\n\t}\n};\n\nPlayer.prototype.pause = function(ev) {\n\tcancelAnimationFrame(this.animationId);\n\tthis.wantsToPlay = false;\n\tthis.isPlaying = false;\n\n\tif (this.audio && this.audio.canPlay) {\n\t\t// Seek to the currentTime again - audio may already be enqueued a bit\n\t\t// further, so we have to rewind it.\n\t\tthis.audioOut.stop();\n\t\tthis.seek(this.currentTime);\n\t}\n\tif(typeof this.source.send_deactive === 'function') {\n\t\tthis.source.send_cmd_active(false);\n\t}\n};\n\nPlayer.prototype.getVolume = function() {\n\treturn this.audioOut ? this.audioOut.volume : 0;\n};\n\nPlayer.prototype.setVolume = function(volume) {\n\tif (this.audioOut) {\n\t\tthis.audioOut.volume = volume;\n\t}\n};\n\nPlayer.prototype.stop = function(ev) {\n\tthis.pause();\n\tthis.seek(0);\n\tif (this.video && this.options.decodeFirstFrame !== false) {\n\t\tthis.video.decode();\n\t}\n};\n\nPlayer.prototype.destroy = function() {\n\tthis.pause();\n\tthis.source.destroy();\n\tthis.renderer.destroy();\n\tthis.audioOut.destroy();\n};\n\nPlayer.prototype.seek = function(time) {\n\tvar startOffset = this.audio && this.audio.canPlay\n\t\t? this.audio.startTime\n\t\t: this.video.startTime;\n\n\tif (this.video) {\n\t\tthis.video.seek(time + startOffset);\n\t}\n\tif (this.audio) {\n\t\tthis.audio.seek(time + startOffset);\n\t}\n\n\tthis.startTime = JSMpeg.Now() - time;\n};\n\nPlayer.prototype.getCurrentTime = function() {\n\treturn this.audio && this.audio.canPlay\n\t\t? this.audio.currentTime - this.audio.startTime\n\t\t: this.video.currentTime - this.video.startTime;\n};\n\nPlayer.prototype.setCurrentTime = function(time) {\n\tthis.seek(time);\n};\n\nPlayer.prototype.update = function() {\n\tthis.animationId = requestAnimationFrame(this.update.bind(this));\n\n\tif (!this.source.established) {\n\t\tif (this.renderer) {\n\t\t\tthis.renderer.renderProgress(this.source.progress);\n\t\t}\n\t\treturn;\n\t}\n\n\tif (!this.isPlaying) {\n\t\tthis.isPlaying = true;\n\t\tthis.startTime = JSMpeg.Now() - this.currentTime;\n\t}\n\n\tif (this.options.streaming) {\n\t\tthis.updateForStreaming();\n\t}\n\telse {\n\t\tthis.updateForStaticFile();\n\t}\n};\n\nPlayer.prototype.updateForStreaming = function() {\n\t// When streaming, immediately decode everything we have buffered up until\n\t// now to minimize playback latency.\n\n\tif (this.video) {\n\t\tthis.video.decode();\n\t}\n\n\tif (this.mjpeg) {\n\t\tthis.mjpeg.decode();\n\t}\n\n\tif (this.audio) {\n\t\tvar decoded = false;\n\t\tdo {\n\t\t\t// If there's a lot of audio enqueued already, disable output and\n\t\t\t// catch up with the encoding.\n\t\t\tif (this.audioOut.enqueuedTime > this.maxAudioLag) {\n\t\t\t\tthis.audioOut.resetEnqueuedTime();\n\t\t\t\tthis.audioOut.enabled = false;\n\t\t\t}\n\t\t\tdecoded = this.audio.decode();\t\t\n\t\t} while (decoded);\n\t\tthis.audioOut.enabled = true;\n\t}\n};\n\nPlayer.prototype.updateForStaticFile = function() {\n\tvar notEnoughData = false,\n\t\theadroom = 0;\n\n\t// If we have an audio track, we always try to sync the video to the audio.\n\t// Gaps and discontinuities are far more percetable in audio than in video.\n\n\tif (this.audio && this.audio.canPlay) {\n\t\t// Do we have to decode and enqueue some more audio data?\n\t\twhile (\n\t\t\t!notEnoughData && \n\t\t\tthis.audio.decodedTime - this.audio.currentTime < 0.25\n\t\t) {\n\t\t\tnotEnoughData = !this.audio.decode();\n\t\t}\n\n\t\t// Sync video to audio\n\t\tif (this.video && this.video.currentTime < this.audio.currentTime) {\n\t\t\tnotEnoughData = !this.video.decode();\n\t\t}\n\n\t\theadroom = this.demuxer.currentTime - this.audio.currentTime;\n\t}\n\n\n\telse if (this.video) {\n\t\t// Video only - sync it to player's wallclock\n\t\tvar targetTime = (JSMpeg.Now() - this.startTime) + this.video.startTime,\n\t\t\tlateTime = targetTime - this.video.currentTime,\n\t\t\tframeTime = 1/this.video.frameRate;\n\n\t\tif (this.video && lateTime > 0) {\n\t\t\t// If the video is too far behind (>2 frames), simply reset the\n\t\t\t// target time to the next frame instead of trying to catch up.\n\t\t\tif (lateTime > frameTime * 2) {\n\t\t\t\tthis.startTime += lateTime;\n\t\t\t}\n\n\t\t\tnotEnoughData = !this.video.decode();\n\t\t}\n\n\t\theadroom = this.demuxer.currentTime - targetTime;\n\t}\n\n\t// Notify the source of the playhead headroom, so it can decide whether to\n\t// continue loading further data.\n\tthis.source.resume(headroom);\n\n\t// If we failed to decode and the source is complete, it means we reached\n\t// the end of our data. We may want to loop.\n\tif (notEnoughData && this.source.completed) {\n\t\tif (this.loop) {\n\t\t\tthis.seek(0);\n\t\t}\n\t\telse {\n\t\t\tthis.pause();\n\t\t}\n\t}\n};\n\nreturn Player;\n\n})();\n\n","JSMpeg.BitBuffer = (function(){ \"use strict\";\n\nvar BitBuffer = function(bufferOrLength, mode) {\n\tif (typeof(bufferOrLength) === 'object') {\n\t\tthis.bytes = (bufferOrLength instanceof Uint8Array)\n\t\t\t? bufferOrLength \n\t\t\t: new Uint8Array(bufferOrLength);\n\n\t\tthis.byteLength = this.bytes.length;\n\t}\n\telse {\n\t\tthis.bytes = new Uint8Array(bufferOrLength || 1024*1024);\t\n\t\tthis.byteLength = 0;\n\t}\n\n\tthis.mode = mode || BitBuffer.MODE.EXPAND;\n\tthis.index = 0;\n};\n\nBitBuffer.prototype.resize = function(size) {\n\tvar newBytes = new Uint8Array(size);\n\tif (this.byteLength !== 0) {\n\t\tthis.byteLength = Math.min(this.byteLength, size);\n\t\tnewBytes.set(this.bytes, 0, this.byteLength);\n\t}\n\tthis.bytes = newBytes;\n\tthis.index = Math.min(this.index, this.byteLength << 3);\n};\n\nBitBuffer.prototype.evict = function(sizeNeeded) {\n\tvar bytePos = this.index >> 3,\n\t\tavailable = this.bytes.length - this.byteLength;\n\t\n\t// If the current index is the write position, we can simply reset both\n\t// to 0. Also reset (and throw away yet unread data) if we won't be able\n\t// to fit the new data in even after a normal eviction.\n\tif (\n\t\tthis.index === this.byteLength << 3 ||\n\t\tsizeNeeded > available + bytePos // emergency evac\n\t) {\n\t\tthis.byteLength = 0;\n\t\tthis.index = 0;\n\t\treturn;\n\t}\n\telse if (bytePos === 0) {\n\t\t// Nothing read yet - we can't evict anything\n\t\treturn;\n\t}\n\t\n\t// Some browsers don't support copyWithin() yet - we may have to do \n\t// it manually using set and a subarray\n\tif (this.bytes.copyWithin) {\n\t\tthis.bytes.copyWithin(0, bytePos, this.byteLength);\n\t}\n\telse {\n\t\tthis.bytes.set(this.bytes.subarray(bytePos, this.byteLength));\n\t}\n\n\tthis.byteLength = this.byteLength - bytePos;\n\tthis.index -= bytePos << 3;\n\treturn;\n};\n\nBitBuffer.prototype.write = function(buffers) {\n\tvar isArrayOfBuffers = (typeof(buffers[0]) === 'object'),\n\t\ttotalLength = 0,\n\t\tavailable = this.bytes.length - this.byteLength;\n\n\t// Calculate total byte length\n\tif (isArrayOfBuffers) {\n\t\tvar totalLength = 0;\n\t\tfor (var i = 0; i < buffers.length; i++) {\n\t\t\ttotalLength += buffers[i].byteLength;\n\t\t}\n\t}\n\telse {\n\t\ttotalLength = buffers.byteLength;\n\t}\n\n\t// Do we need to resize or evict?\n\tif (totalLength > available) {\n\t\tif (this.mode === BitBuffer.MODE.EXPAND) {\n\t\t\tvar newSize = Math.max(\n\t\t\t\tthis.bytes.length * 2,\n\t\t\t\ttotalLength - available\n\t\t\t);\n\t\t\tthis.resize(newSize)\n\t\t}\n\t\telse {\n\t\t\tthis.evict(totalLength);\n\t\t}\n\t}\n\n\tif (isArrayOfBuffers) {\n\t\tfor (var i = 0; i < buffers.length; i++) {\n\t\t\tthis.appendSingleBuffer(buffers[i]);\n\t\t}\n\t}\n\telse {\n\t\tthis.appendSingleBuffer(buffers);\n\t}\n};\n\nBitBuffer.prototype.appendSingleBuffer = function(buffer) {\n\tbuffer = buffer instanceof Uint8Array\n\t\t? buffer \n\t\t: new Uint8Array(buffer);\n\t\n\tthis.bytes.set(buffer, this.byteLength);\n\tthis.byteLength += buffer.length;\n};\n\nBitBuffer.prototype.findNextStartCode = function() {\t\n\tfor (var i = (this.index+7 >> 3); i < this.byteLength; i++) {\n\t\tif(\n\t\t\tthis.bytes[i] == 0x00 &&\n\t\t\tthis.bytes[i+1] == 0x00 &&\n\t\t\tthis.bytes[i+2] == 0x01\n\t\t) {\n\t\t\tthis.index = (i+4) << 3;\n\t\t\treturn this.bytes[i+3];\n\t\t}\n\t}\n\tthis.index = (this.byteLength << 3);\n\treturn -1;\n};\n\nBitBuffer.prototype.findStartCode = function(code) {\n\tvar current = 0;\n\twhile (true) {\n\t\tcurrent = this.findNextStartCode();\n\t\tif (current === code || current === -1) {\n\t\t\treturn current;\n\t\t}\n\t}\n\treturn -1;\n};\n\nBitBuffer.prototype.nextBytesAreStartCode = function() {\n\tvar i = (this.index+7 >> 3);\n\treturn (\n\t\ti >= this.byteLength || (\n\t\t\tthis.bytes[i] == 0x00 && \n\t\t\tthis.bytes[i+1] == 0x00 &&\n\t\t\tthis.bytes[i+2] == 0x01\n\t\t)\n\t);\n};\n\nBitBuffer.prototype.peek = function(count) {\n\tvar offset = this.index;\n\tvar value = 0;\n\twhile (count) {\n\t\tvar currentByte = this.bytes[offset >> 3],\n\t\t\tremaining = 8 - (offset & 7), // remaining bits in byte\n\t\t\tread = remaining < count ? remaining : count, // bits in this run\n\t\t\tshift = remaining - read,\n\t\t\tmask = (0xff >> (8-read));\n\n\t\tvalue = (value << read) | ((currentByte & (mask << shift)) >> shift);\n\n\t\toffset += read;\n\t\tcount -= read;\n\t}\n\n\treturn value;\n}\n\nBitBuffer.prototype.read = function(count) {\n\tvar value = this.peek(count);\n\tthis.index += count;\n\treturn value;\n};\n\nBitBuffer.prototype.skip = function(count) {\n\treturn (this.index += count);\n};\n\nBitBuffer.prototype.rewind = function(count) {\n\tthis.index = Math.max(this.index - count, 0);\n};\n\nBitBuffer.prototype.has = function(count) {\n\treturn ((this.byteLength << 3) - this.index) >= count;\n};\n\nBitBuffer.MODE = {\n\tEVICT: 1,\n\tEXPAND: 2\n};\n\nreturn BitBuffer;\n\n})();\n\n\n","JSMpeg.Source.Ajax = (function(){ \"use strict\";\n\nvar AjaxSource = function(url, options) {\n\tthis.url = url;\n\tthis.destination = null;\n\tthis.request = null;\n\n\tthis.completed = false;\n\tthis.established = false;\n\tthis.progress = 0;\n};\n\nAjaxSource.prototype.connect = function(destination) {\n\tthis.destination = destination;\n};\n\nAjaxSource.prototype.start = function() {\n\tthis.request = new XMLHttpRequest();\n\n\tthis.request.onreadystatechange = function() {\n\t\tif (\n\t\t\tthis.request.readyState === this.request.DONE && \n\t\t\tthis.request.status === 200\n\t\t) {\n\t\t\tthis.onLoad(this.request.response);\n\t\t}\n\t}.bind(this);\n\n\tthis.request.onprogress = this.onProgress.bind(this);\n\tthis.request.open('GET', this.url);\n\tthis.request.responseType = \"arraybuffer\";\n\tthis.request.send();\n};\n\nAjaxSource.prototype.resume = function(secondsHeadroom) {\n\t// Nothing to do here\n};\n\nAjaxSource.prototype.destroy = function() {\n\tthis.request.abort();\n};\n\nAjaxSource.prototype.onProgress = function(ev) {\n\tthis.progress = (ev.loaded / ev.total);\n};\n\nAjaxSource.prototype.onLoad = function(data) {\n\tthis.established = true;\n\tthis.completed = true;\n\tthis.progress = 1;\n\n\tif (this.destination) {\n\t\tthis.destination.write(data);\n\t}\n};\n\nreturn AjaxSource;\n\n})();\n\n\n","JSMpeg.Source.AjaxProgressive = (function(){ \"use strict\";\n\nvar AjaxProgressiveSource = function(url, options) {\n\tthis.url = url;\n\tthis.destination = null;\n\tthis.request = null;\n\n\tthis.completed = false;\n\tthis.established = false;\n\tthis.progress = 0;\n\n\tthis.fileSize = 0;\n\tthis.loadedSize = 0;\n\tthis.chunkSize = options.chunkSize || 1024*1024;\n\n\tthis.isLoading = false;\n\tthis.loadStartTime = 0;\n\tthis.throttled = options.throttled !== false;\n\tthis.aborted = false;\n};\n\nAjaxProgressiveSource.prototype.connect = function(destination) {\n\tthis.destination = destination;\n};\n\nAjaxProgressiveSource.prototype.start = function() {\n\tthis.request = new XMLHttpRequest();\n\n\tthis.request.onreadystatechange = function() {\n\t\tif (this.request.readyState === this.request.DONE) {\n\t\t\tthis.fileSize = parseInt(\n\t\t\t\tthis.request.getResponseHeader(\"Content-Length\")\n\t\t\t);\n\t\t\tthis.loadNextChunk();\n\t\t}\n\t}.bind(this);\n\n\tthis.request.onprogress = this.onProgress.bind(this);\n\tthis.request.open('HEAD', this.url);\n\tthis.request.send();\n};\n\nAjaxProgressiveSource.prototype.resume = function(secondsHeadroom) {\n\tif (this.isLoading || !this.throttled) {\n\t\treturn;\n\t}\n\n\t// Guess the worst case loading time with lots of safety margin. This is\n\t// somewhat arbitrary...\n\tvar worstCaseLoadingTime = this.loadTime * 8 + 2;\n\tif (worstCaseLoadingTime > secondsHeadroom) {\n\t\tthis.loadNextChunk();\n\t}\n};\n\nAjaxProgressiveSource.prototype.destroy = function() {\n\tthis.request.abort();\n\tthis.aborted = true;\n};\n\nAjaxProgressiveSource.prototype.loadNextChunk = function() {\n\tvar start = this.loadedSize,\n\t\tend = Math.min(this.loadedSize + this.chunkSize-1, this.fileSize-1);\n\t\n\tif (start >= this.fileSize || this.aborted) {\n\t\tthis.completed = true;\n\t\treturn;\n\t}\n\t\n\tthis.isLoading = true;\n\tthis.loadStartTime = JSMpeg.Now();\n\tthis.request = new XMLHttpRequest();\n\n\tthis.request.onreadystatechange = function() {\t\t\n\t\tif (\n\t\t\tthis.request.readyState === this.request.DONE && \n\t\t\tthis.request.status >= 200 && this.request.status < 300\n\t\t) {\n\t\t\tthis.onChunkLoad(this.request.response);\n\t\t}\n\t\telse if (this.request.readyState === this.request.DONE) {\n\t\t\t// Retry?\n\t\t\tif (this.loadFails++ < 3) {\n\t\t\t\tthis.loadNextChunk();\n\t\t\t}\n\t\t}\n\t}.bind(this);\n\t\n\tif (start === 0) {\n\t\tthis.request.onprogress = this.onProgress.bind(this);\n\t}\n\n\tthis.request.open('GET', this.url+'?'+start+\"-\"+end);\n\tthis.request.setRequestHeader(\"Range\", \"bytes=\"+start+\"-\"+end);\n\tthis.request.responseType = \"arraybuffer\";\n\tthis.request.send();\n};\n\nAjaxProgressiveSource.prototype.onProgress = function(ev) {\n\tthis.progress = (ev.loaded / ev.total);\n};\n\nAjaxProgressiveSource.prototype.onChunkLoad = function(data) {\n\tthis.established = true;\n\tthis.progress = 1;\n\tthis.loadedSize += data.byteLength;\n\tthis.loadFails = 0;\n\tthis.isLoading = false;\n\n\tif (this.destination) {\n\t\tthis.destination.write(data);\n\t}\n\n\tthis.loadTime = JSMpeg.Now() - this.loadStartTime;\n\tif (!this.throttled) {\n\t\tthis.loadNextChunk();\n\t}\n};\n\nreturn AjaxProgressiveSource;\n\n})();\n\n\n","JSMpeg.Source.WebSocket = (function(){ \"use strict\";\n\nvar WSSource = function(url, options) {\n\tthis.url = url;\n\tthis.options = options;\n\tthis.socket = null;\t\n\n\tthis.callbacks = {connect: [], data: []};\n\tthis.destination = null;\n\n\tthis.reconnectInterval = options.reconnectInterval !== undefined\n\t\t? options.reconnectInterval\n\t\t: 5000;\n\tthis.shouldAttemptReconnect = !!this.reconnectInterval;\n\n\tthis.completed = false;\n\tthis.established = false;\n\tthis.progress = 0;\n\n\tthis.reconnectTimeoutId = 0;\n\tthis.forceReconnect = false;\n};\n\nWSSource.prototype.connect = function(destination) {\n\tthis.destination = destination;\n};\n\nWSSource.prototype.destroy = function() {\n\tclearTimeout(this.reconnectTimeoutId);\n\tthis.shouldAttemptReconnect = false;\n\tthis.socket.close();\n};\n\nWSSource.prototype.send = function(data) {\n\tthis.socket.send(data);\n};\n\nWSSource.prototype.start = function() {\n\tthis.shouldAttemptReconnect = !!this.reconnectInterval;\n\tthis.progress = 0;\n\tthis.established = false;\n\t\n\tthis.socket = new WebSocket(this.url, this.options.protocols || null);\n\tthis.socket.binaryType = 'arraybuffer';\n\tthis.socket.onmessage = this.onMessage.bind(this);\n\tthis.socket.onopen = this.onOpen.bind(this);\n\tthis.socket.onerror = this.onClose.bind(this);\n\tthis.socket.onclose = this.onClose.bind(this);\n};\n\nWSSource.prototype.resume = function(secondsHeadroom) {\n\t// Nothing to do here\n};\n\nWSSource.prototype.onOpen = function() {\n\tthis.progress = 1;\n\tthis.established = true;\n\n\tif (typeof JSMpeg.on_source_opened === \"function\") { \n\t\tJSMpeg.on_source_opened(this);\n\t}\n};\n\nWSSource.prototype.getReconnectInterval = function() {\n\tif (JSMpeg.config.reconnectInterval) {\n\t\treturn JSMpeg.config.reconnectInterval;\n\t}\n\treturn this.reconnectInterval;\n};\n\nWSSource.prototype.onClose = function() {\n\tif (this.shouldAttemptReconnect) {\n\t\tclearTimeout(this.reconnectTimeoutId);\n\n\t\tif (this.forceReconnect === true) {\n\t\t\tthis.start();\t\n\t\t\tthis.forceReconnect = false;\n\t\t} else {\n\t\t\tthis.reconnectTimeoutId = setTimeout(function(){\n\t\t\t\tthis.start();\t\n\t\t\t}.bind(this), this.getReconnectInterval());\n\t\t}\n\t}\n};\n\nWSSource.prototype.onMessage = function(ev) {\n\tif (this.destination) {\n\t\tthis.destination.write(ev.data);\n\t}\n};\n\nWSSource.prototype.jsonPost = function( url, data, callback, timeout ) {\n\ttimeout = timeout? timeout : 5000;  \n\n\tvar xhr = new XMLHttpRequest();\n\n\txhr.onerror = function (e) {\n\t\tcallback('error');\n\t};\n\n\txhr.onload = function() {\n\t\tvar res = null;\n\t\ttry {\n\t\t\tres = JSON.parse( xhr.responseText );\n\t\t} catch (e) {}\n\n\t\tif (res === null) {\n\t\t\tcallback('formatError');\n\t\t}\n\n\t\tcallback(null, res);\n\t};\n\n\txhr.open('POST', url, true);\n\txhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n\txhr.send(JSON.stringify(data));\n\n\tsetTimeout(function() {\n\t\tif (xhr.readyState !== XMLHttpRequest.DONE) {\n\t\t\txhr.abort();\n\t\t\tcallback('timeout');\n\t\t}\n\t}, timeout);\n\n};\n\nWSSource.prototype.send_cmd_active = function (param) {\n\tif(this.established) {\n\t\tthis.send(JSON.stringify({\n\t\t\thandler: JSMpeg.infos.videoMode,\n\t\t\tuserId: JSMpeg.userid(),\n\t\t\tcmd: 'active',\n\t\t\tparam: param\n\t\t}));\n\t}\n};\n\nreturn WSSource;\n\n})();\n\n","JSMpeg.Source.Dispatch = (function(){ \"use strict\";\n\nvar SourceDisp = function(options) {\n\tthis.options = options;\n\tthis.distList = {};\n};\n\nSourceDisp.SOURCEID = {\n\tSOURCE_MPEG1: 'MPEG1', \n\tSOURCE_MJPEG: 'MJPEG', \n\tSOURCE_JSON: 'JSON'\n};\n\nSourceDisp.prototype.connect = function(sourceId, destination) {\n\tthis.distList[ sourceId ] = destination;\n};\n\nSourceDisp.prototype.write = function(buffer) {\n\tif (typeof buffer === 'string') {\n\t\tthis.distList['JSON'].write(buffer);\n\t\treturn;\n\t}\n\n\tvar dataView = new DataView(buffer);\n\tvar sign = dataView.getUint16(0);\n\n\tif (sign === 0xFFD8) {\n\t\tthis.distList['MJPEG'].write(buffer);\n\t\treturn;\n\t}\n\n\tthis.distList['MPEG1'].write(buffer);\n};\n\nreturn SourceDisp;\n\n})();\n\n\n","JSMpeg.Demuxer.TS = (function(){ \"use strict\";\n\nvar TS = function(options) {\n\tthis.bits = null;\n\tthis.leftoverBytes = null;\n\n\tthis.guessVideoFrameEnd = true;\n\tthis.pidsToStreamIds = {};\n\n\tthis.pesPacketInfo = {};\n\tthis.startTime = 0;\n\tthis.currentTime = 0;\n};\n\nTS.prototype.connect = function(streamId, destination) {\n\tthis.pesPacketInfo[streamId] = {\n\t\tdestination: destination,\n\t\tcurrentLength: 0,\n\t\ttotalLength: 0,\n\t\tpts: 0,\n\t\tbuffers: []\n\t};\n};\n\nTS.prototype.write = function(buffer) {\n\tif (this.leftoverBytes) {\n\t\tvar totalLength = buffer.byteLength + this.leftoverBytes.byteLength;\n\t\tthis.bits = new JSMpeg.BitBuffer(totalLength);\n\t\tthis.bits.write([this.leftoverBytes, buffer]);\n\t}\n\telse {\n\t\tthis.bits = new JSMpeg.BitBuffer(buffer);\n\t}\n\n\twhile (this.bits.has(188 << 3) && this.parsePacket()) {}\n\n\tvar leftoverCount = this.bits.byteLength - (this.bits.index >> 3);\n\tthis.leftoverBytes = leftoverCount > 0\n\t\t? this.bits.bytes.subarray(this.bits.index >> 3)\n\t\t: null;\n};\n\nTS.prototype.parsePacket = function() {\n\t// Check if we're in sync with packet boundaries; attempt to resync if not.\n\tif (this.bits.read(8) !== 0x47) {\n\t\tif (!this.resync()) {\n\t\t\t// Couldn't resync; maybe next time...\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tvar end = (this.bits.index >> 3) + 187;\n\tvar transportError = this.bits.read(1),\n\t\tpayloadStart = this.bits.read(1),\n\t\ttransportPriority = this.bits.read(1),\n\t\tpid = this.bits.read(13),\n\t\ttransportScrambling = this.bits.read(2),\n\t\tadaptationField = this.bits.read(2),\n\t\tcontinuityCounter = this.bits.read(4);\n\n\n\t// If this is the start of a new payload; signal the end of the previous\n\t// frame, if we didn't do so already.\n\tvar streamId = this.pidsToStreamIds[pid];\n\tif (payloadStart && streamId) {\n\t\tvar pi = this.pesPacketInfo[streamId];\n\t\tif (pi && pi.currentLength) {\n\t\t\tthis.packetComplete(pi);\n\t\t}\n\t}\n\n\t// Extract current payload\n\tif (adaptationField & 0x1) {\n\t\tif ((adaptationField & 0x2)) {\n\t\t\tvar adaptationFieldLength = this.bits.read(8);\n\t\t\tthis.bits.skip(adaptationFieldLength << 3);\n\t\t}\n\n\t\tif (payloadStart && this.bits.nextBytesAreStartCode()) {\n\t\t\tthis.bits.skip(24);\n\t\t\tstreamId = this.bits.read(8);\n\t\t\tthis.pidsToStreamIds[pid] = streamId;\n\n\t\t\tvar packetLength = this.bits.read(16)\n\t\t\tthis.bits.skip(8);\n\t\t\tvar ptsDtsFlag = this.bits.read(2);\n\t\t\tthis.bits.skip(6);\n\t\t\tvar headerLength = this.bits.read(8);\n\t\t\tvar payloadBeginIndex = this.bits.index + (headerLength << 3);\n\t\t\t\n\t\t\tvar pi = this.pesPacketInfo[streamId];\n\t\t\tif (pi) {\n\t\t\t\tvar pts = 0;\n\t\t\t\tif (ptsDtsFlag & 0x2) {\n\t\t\t\t\t// The Presentation Timestamp is encoded as 33(!) bit\n\t\t\t\t\t// integer, but has a \"marker bit\" inserted at weird places\n\t\t\t\t\t// in between, making the whole thing 5 bytes in size.\n\t\t\t\t\t// You can't make this shit up...\n\t\t\t\t\tthis.bits.skip(4);\n\t\t\t\t\tvar p32_30 = this.bits.read(3);\n\t\t\t\t\tthis.bits.skip(1);\n\t\t\t\t\tvar p29_15 = this.bits.read(15);\n\t\t\t\t\tthis.bits.skip(1);\n\t\t\t\t\tvar p14_0 = this.bits.read(15);\n\t\t\t\t\tthis.bits.skip(1);\n\n\t\t\t\t\t// Can't use bit shifts here; we need 33 bits of precision,\n\t\t\t\t\t// so we're using JavaScript's double number type. Also\n\t\t\t\t\t// divide by the 90khz clock to get the pts in seconds.\n\t\t\t\t\tpts = (p32_30 * 1073741824 + p29_15 * 32768 + p14_0)/90000;\n\t\t\t\t\t\n\t\t\t\t\tthis.currentTime = pts;\n\t\t\t\t\tif (this.startTime === -1) {\n\t\t\t\t\t\tthis.startTime = pts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar payloadLength = packetLength \n\t\t\t\t\t? packetLength - headerLength - 3\n\t\t\t\t\t: 0;\n\t\t\t\tthis.packetStart(pi, pts, payloadLength);\n\t\t\t}\n\n\t\t\t// Skip the rest of the header without parsing it\n\t\t\tthis.bits.index = payloadBeginIndex;\n\t\t}\n\n\t\tif (streamId) {\n\t\t\t// Attempt to detect if the PES packet is complete. For Audio (and\n\t\t\t// other) packets, we received a total packet length with the PES \n\t\t\t// header, so we can check the current length.\n\n\t\t\t// For Video packets, we have to guess the end by detecting if this\n\t\t\t// TS packet was padded - there's no good reason to pad a TS packet \n\t\t\t// in between, but it might just fit exactly. If this fails, we can\n\t\t\t// only wait for the next PES header for that stream.\n\n\t\t\tvar pi = this.pesPacketInfo[streamId];\n\t\t\tif (pi) {\n\t\t\t\tvar start = this.bits.index >> 3;\n\t\t\t\tvar complete = this.packetAddData(pi, start, end);\n\n\t\t\t\tvar hasPadding = !payloadStart && (adaptationField & 0x2);\n\t\t\t\tif (complete || (this.guessVideoFrameEnd && hasPadding)) {\n\t\t\t\t\tthis.packetComplete(pi);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.bits.index = end << 3;\n\treturn true;\n};\n\nTS.prototype.resync = function() {\n\t// Check if we have enough data to attempt a resync. We need 5 full packets.\n\tif (!this.bits.has((188 * 6) << 3)) {\n\t\treturn false;\n\t}\n\n\tvar byteIndex = this.bits.index >> 3;\n\n\t// Look for the first sync token in the first 187 bytes\n\tfor (var i = 0; i < 187; i++) {\n\t\tif (this.bits.bytes[byteIndex + i] === 0x47) {\n\n\t\t\t// Look for 4 more sync tokens, each 188 bytes appart\n\t\t\tvar foundSync = true;\n\t\t\tfor (var j = 1; j < 5; j++) {\n\t\t\t\tif (this.bits.bytes[byteIndex + i + 188 * j] !== 0x47) {\n\t\t\t\t\tfoundSync = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (foundSync) {\n\t\t\t\tthis.bits.index = (byteIndex + i + 1) << 3;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// In theory, we shouldn't arrive here. If we do, we had enough data but\n\t// still didn't find sync - this can only happen if we were fed garbage\n\t// data. Check your source!\n\tconsole.warn('JSMpeg: Possible garbage data. Skipping.');\n\tthis.bits.skip(187 << 3);\n\treturn false;\n};\n\nTS.prototype.packetStart = function(pi, pts, payloadLength) {\n\tpi.totalLength = payloadLength;\n\tpi.currentLength = 0;\n\tpi.pts = pts;\n};\n\nTS.prototype.packetAddData = function(pi, start, end) {\n\tpi.buffers.push(this.bits.bytes.subarray(start, end));\n\tpi.currentLength += end - start;\n\n\tvar complete = (pi.totalLength !== 0 && pi.currentLength >= pi.totalLength);\n\treturn complete;\n};\n\nTS.prototype.packetComplete = function(pi) {\n\tpi.destination.write(pi.pts, pi.buffers);\n\tpi.totalLength = 0;\n\tpi.currentLength = 0;\n\tpi.buffers = [];\n};\n\nTS.STREAM = {\n\tPACK_HEADER: 0xBA,\n\tSYSTEM_HEADER: 0xBB,\n\tPROGRAM_MAP: 0xBC,\n\tPRIVATE_1: 0xBD,\n\tPADDING: 0xBE,\n\tPRIVATE_2: 0xBF,\n\tAUDIO_1: 0xC0,\n\tVIDEO_1: 0xE0,\n\tDIRECTORY: 0xFF\n};\n\nreturn TS;\n\n})();\n\n\n","JSMpeg.Decoder.Base = (function(){ \"use strict\";\n\nvar BaseDecoder = function(options) {\n\tthis.destination = null;\n\tthis.canPlay = false;\n\n\tthis.collectTimestamps = !options.streaming;\n\tthis.timestamps = [];\n\tthis.timestampIndex = 0;\n\n\tthis.startTime = 0;\n\tthis.decodedTime = 0;\n\n\tObject.defineProperty(this, 'currentTime', {get: this.getCurrentTime});\n};\n\nBaseDecoder.prototype.connect = function(destination) {\n\tthis.destination = destination;\n};\n\nBaseDecoder.prototype.write = function(pts, buffers) {\n\tif (this.collectTimestamps) {\n\t\tif (this.timestamps.length === 0) {\n\t\t\tthis.startTime = pts;\n\t\t\tthis.decodedTime = pts;\n\t\t}\n\t\tthis.timestamps.push({index: this.bits.byteLength << 3, time: pts});\n\t}\n\n\tthis.bits.write(buffers);\n\tthis.canPlay = true;\n};\n\nBaseDecoder.prototype.seek = function(time) {\n\tif (!this.collectTimestamps) {\n\t\treturn;\n\t}\n\n\tthis.timestampIndex = 0;\n\tfor (var i = 0; i < this.timestamps.length; i++) {\n\t\tif (this.timestamps[i].time > time) {\n\t\t\tbreak;\n\t\t}\n\t\tthis.timestampIndex = i;\n\t}\n\n\tvar ts = this.timestamps[this.timestampIndex];\n\tif (ts) {\n\t\tthis.bits.index = ts.index;\n\t\tthis.decodedTime = ts.time;\n\t}\n\telse {\n\t\tthis.bits.index = 0;\n\t\tthis.decodedTime = this.startTime;\n\t}\n};\n\nBaseDecoder.prototype.decode = function() {\n\tthis.advanceDecodedTime(0);\n};\n\nBaseDecoder.prototype.advanceDecodedTime = function(seconds) {\n\tif (this.collectTimestamps) {\n\t\tvar newTimestampIndex = -1;\n\t\tfor (var i = this.timestampIndex; i < this.timestamps.length; i++) {\n\t\t\tif (this.timestamps[i].index > this.bits.index) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tnewTimestampIndex = i;\n\t\t}\n\n\t\t// Did we find a new PTS, different from the last? If so, we don't have\n\t\t// to advance the decoded time manually and can instead sync it exactly\n\t\t// to the PTS.\n\t\tif (\n\t\t\tnewTimestampIndex !== -1 && \n\t\t\tnewTimestampIndex !== this.timestampIndex\n\t\t) {\n\t\t\tthis.timestampIndex = newTimestampIndex;\n\t\t\tthis.decodedTime = this.timestamps[this.timestampIndex].time;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.decodedTime += seconds;\n};\n\nBaseDecoder.prototype.getCurrentTime = function() {\n\treturn this.decodedTime;\n};\n\nreturn BaseDecoder;\n\n})();\n\n\n","JSMpeg.Decoder.JsonMsg = (function(){ \"use strict\";\n\nvar JsonMsg = function(options) {\n\tthis.source = null;\n\tJSMpeg.config.videoMode = options.start;\n\n};\n\nJsonMsg.prototype.write = function(buffer) {\n\tJSMpeg.infos.reports = JSON.parse(buffer);\n\tvar reports = JSMpeg.infos.reports; \t\n\n\tif (reports.cmd == 'switchUpstream') {\n\t\tJSMpeg.log('switchUpstream', reports);\n\t\treturn;\n\t}\n\n\tdelete reports.cmd;\n\tJSMpeg.infos.upstreams = reports.nodes[ reports.nodes.length - 1 ].upstreams; \n\tJSMpeg.onHeartbeatReport( reports );\n};\n\nreturn JsonMsg;\n\n})();\n","JSMpeg.Decoder.MJpeg = (function(){ \"use strict\";\n\nvar MJpeg = function(options) {\n\tthis.newest_image = null;\n\tthis.width = 0;\n\tthis.height = 0;\n};\n\nMJpeg.prototype.connect = function(destination) {\n\tthis.destination = destination;\n};\n\nMJpeg.prototype.write = function(buffer) {\n\tthis.newest_image = new Uint8Array(buffer);\n};\n\nMJpeg.prototype.decode = function() {\n\tif (this.newest_image === null) {\n\t\treturn false;\n\t}\n\n\tif (this.destination){\n\t\tvar begintime = Date.now();\n\n\t\tvar image = new Image();\n\t\tvar oldWidth = this.width;\n\t\tvar oldHeight = this.height;\n\t\t\n\t\timage.onload = function () {\n\t\t\tif (oldWidth !== this.width || oldHeight !== this.height) {\n\t\t\t\tthis.destination.resize(newWidth, newHeight);\n\t\t\t}\n\n\t\t\tthis.destination.renderJpeg(image);\n\t\t\tif (typeof JSMpeg.on_mjpeg_rendered === \"function\") { \n\t\t\t\tJSMpeg.on_mjpeg_rendered(this.source, Date.now() - begintime);\n\t\t\t}\n\t\t}.bind(this);\n\n\t\timage.src = 'data:image/png;base64,'+this.jpgEncode(this.newest_image);\n\t}\n\n\tthis.newest_image = null;\n\treturn true;\n};\n\nMJpeg.prototype.jpgEncode = function (input) {\n\tvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\tvar output = \"\";\n\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\tvar i = 0;\n\n\twhile (i < input.length) {\n\t\tchr1 = input[i++];\n\t\tchr2 = i < input.length ? input[i++] : Number.NaN; // Not sure if the index \n\t\tchr3 = i < input.length ? input[i++] : Number.NaN; // checks are needed here\n\n\t\tenc1 = chr1 >> 2;\n\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\tenc4 = chr3 & 63;\n\n\t\tif (isNaN(chr2)) {\n\t\t\tenc3 = enc4 = 64;\n\t\t} else if (isNaN(chr3)) {\n\t\t\tenc4 = 64;\n\t\t}\n\t\toutput += keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n\t\t\tkeyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t}\n\treturn output;\n};\n\nreturn MJpeg;\n\n})();\n\n/*\n\nJSMpeg.Decoder.MJpeg = (function(){ \"use strict\";\n\nvar MJpeg = function(options) {\n\tthis.bits = null;\n\tthis.leftoverBytes = null;\n\n\tthis.guessVideoFrameEnd = true;\n\tthis.pidsToStreamIds = {};\n\n\tthis.pesPacketInfo = {};\n\tthis.startTime = 0;\n\tthis.currentTime = 0;\n};\n\nMJpeg.prototype.connect = function(streamId, destination) {\n\tthis.pesPacketInfo[streamId] = {\n\t\tdestination: destination,\n\t\tcurrentLength: 0,\n\t\ttotalLength: 0,\n\t\tpts: 0,\n\t\tbuffers: []\n\t};\n};\n\nMJpeg.prototype.write = function(buffer) {\n\tif (this.leftoverBytes) {\n\t\tvar totalLength = buffer.byteLength + this.leftoverBytes.byteLength;\n\t\tthis.bits = new JSMpeg.BitBuffer(totalLength);\n\t\tthis.bits.write([this.leftoverBytes, buffer]);\n\t}\n\telse {\n\t\tthis.bits = new JSMpeg.BitBuffer(buffer);\n\t}\n\n\twhile (this.bits.has(188 << 3) && this.parsePacket()) {}\n\n\tvar leftoverCount = this.bits.byteLength - (this.bits.index >> 3);\n\tthis.leftoverBytes = leftoverCount > 0\n\t\t? this.bits.bytes.subarray(this.bits.index >> 3)\n\t\t: null;\n};\n\nMJpeg.prototype.parsePacket = function() {\n\t// Check if we're in sync with packet boundaries; attempt to resync if not.\n\tif (this.bits.read(8) !== 0x47) {\n\t\tif (!this.resync()) {\n\t\t\t// Couldn't resync; maybe next time...\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tvar end = (this.bits.index >> 3) + 187;\n\tvar transportError = this.bits.read(1),\n\t\tpayloadStart = this.bits.read(1),\n\t\ttransportPriority = this.bits.read(1),\n\t\tpid = this.bits.read(13),\n\t\ttransportScrambling = this.bits.read(2),\n\t\tadaptationField = this.bits.read(2),\n\t\tcontinuityCounter = this.bits.read(4);\n\n\n\t// If this is the start of a new payload; signal the end of the previous\n\t// frame, if we didn't do so already.\n\tvar streamId = this.pidsToStreamIds[pid];\n\tif (payloadStart && streamId) {\n\t\tvar pi = this.pesPacketInfo[streamId];\n\t\tif (pi && pi.currentLength) {\n\t\t\tthis.packetComplete(pi);\n\t\t}\n\t}\n\n\t// Extract current payload\n\tif (adaptationField & 0x1) {\n\t\tif ((adaptationField & 0x2)) {\n\t\t\tvar adaptationFieldLength = this.bits.read(8);\n\t\t\tthis.bits.skip(adaptationFieldLength << 3);\n\t\t}\n\n\t\tif (payloadStart && this.bits.nextBytesAreStartCode()) {\n\t\t\tthis.bits.skip(24);\n\t\t\tstreamId = this.bits.read(8);\n\t\t\tthis.pidsToStreamIds[pid] = streamId;\n\n\t\t\tvar packetLength = this.bits.read(16)\n\t\t\tthis.bits.skip(8);\n\t\t\tvar ptsDtsFlag = this.bits.read(2);\n\t\t\tthis.bits.skip(6);\n\t\t\tvar headerLength = this.bits.read(8);\n\t\t\tvar payloadBeginIndex = this.bits.index + (headerLength << 3);\n\t\t\t\n\t\t\tvar pi = this.pesPacketInfo[streamId];\n\t\t\tif (pi) {\n\t\t\t\tvar pts = 0;\n\t\t\t\tif (ptsDtsFlag & 0x2) {\n\t\t\t\t\t// The Presentation Timestamp is encoded as 33(!) bit\n\t\t\t\t\t// integer, but has a \"marker bit\" inserted at weird places\n\t\t\t\t\t// in between, making the whole thing 5 bytes in size.\n\t\t\t\t\t// You can't make this shit up...\n\t\t\t\t\tthis.bits.skip(4);\n\t\t\t\t\tvar p32_30 = this.bits.read(3);\n\t\t\t\t\tthis.bits.skip(1);\n\t\t\t\t\tvar p29_15 = this.bits.read(15);\n\t\t\t\t\tthis.bits.skip(1);\n\t\t\t\t\tvar p14_0 = this.bits.read(15);\n\t\t\t\t\tthis.bits.skip(1);\n\n\t\t\t\t\t// Can't use bit shifts here; we need 33 bits of precision,\n\t\t\t\t\t// so we're using JavaScript's double number type. Also\n\t\t\t\t\t// divide by the 90khz clock to get the pts in seconds.\n\t\t\t\t\tpts = (p32_30 * 1073741824 + p29_15 * 32768 + p14_0)/90000;\n\t\t\t\t\t\n\t\t\t\t\tthis.currentTime = pts;\n\t\t\t\t\tif (this.startTime === -1) {\n\t\t\t\t\t\tthis.startTime = pts;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar payloadLength = packetLength \n\t\t\t\t\t? packetLength - headerLength - 3\n\t\t\t\t\t: 0;\n\t\t\t\tthis.packetStart(pi, pts, payloadLength);\n\t\t\t}\n\n\t\t\t// Skip the rest of the header without parsing it\n\t\t\tthis.bits.index = payloadBeginIndex;\n\t\t}\n\n\t\tif (streamId) {\n\t\t\t// Attempt to detect if the PES packet is complete. For Audio (and\n\t\t\t// other) packets, we received a total packet length with the PES \n\t\t\t// header, so we can check the current length.\n\n\t\t\t// For Video packets, we have to guess the end by detecting if this\n\t\t\t// MJpeg packet was padded - there's no good reason to pad a MJpeg packet \n\t\t\t// in between, but it might just fit exactly. If this fails, we can\n\t\t\t// only wait for the next PES header for that stream.\n\n\t\t\tvar pi = this.pesPacketInfo[streamId];\n\t\t\tif (pi) {\n\t\t\t\tvar start = this.bits.index >> 3;\n\t\t\t\tvar complete = this.packetAddData(pi, start, end);\n\n\t\t\t\tvar hasPadding = !payloadStart && (adaptationField & 0x2);\n\t\t\t\tif (complete || (this.guessVideoFrameEnd && hasPadding)) {\n\t\t\t\t\tthis.packetComplete(pi);\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.bits.index = end << 3;\n\treturn true;\n};\n\nMJpeg.prototype.resync = function() {\n\t// Check if we have enough data to attempt a resync. We need 5 full packets.\n\tif (!this.bits.has((188 * 6) << 3)) {\n\t\treturn false;\n\t}\n\n\tvar byteIndex = this.bits.index >> 3;\n\n\t// Look for the first sync token in the first 187 bytes\n\tfor (var i = 0; i < 187; i++) {\n\t\tif (this.bits.bytes[byteIndex + i] === 0x47) {\n\n\t\t\t// Look for 4 more sync tokens, each 188 bytes appart\n\t\t\tvar foundSync = true;\n\t\t\tfor (var j = 1; j < 5; j++) {\n\t\t\t\tif (this.bits.bytes[byteIndex + i + 188 * j] !== 0x47) {\n\t\t\t\t\tfoundSync = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (foundSync) {\n\t\t\t\tthis.bits.index = (byteIndex + i + 1) << 3;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// In theory, we shouldn't arrive here. If we do, we had enough data but\n\t// still didn't find sync - this can only happen if we were fed garbage\n\t// data. Check your source!\n\tconsole.warn('JSMpeg: Possible garbage data. Skipping.');\n\tthis.bits.skip(187 << 3);\n\treturn false;\n};\n\nMJpeg.prototype.packetStart = function(pi, pts, payloadLength) {\n\tpi.totalLength = payloadLength;\n\tpi.currentLength = 0;\n\tpi.pts = pts;\n};\n\nMJpeg.prototype.packetAddData = function(pi, start, end) {\n\tpi.buffers.push(this.bits.bytes.subarray(start, end));\n\tpi.currentLength += end - start;\n\n\tvar complete = (pi.totalLength !== 0 && pi.currentLength >= pi.totalLength);\n\treturn complete;\n};\n\nMJpeg.prototype.packetComplete = function(pi) {\n\tpi.destination.write(pi.pts, pi.buffers);\n\tpi.totalLength = 0;\n\tpi.currentLength = 0;\n\tpi.buffers = [];\n};\n\nMJpeg.STREAM = {\n\tPACK_HEADER: 0xBA,\n\tSYSTEM_HEADER: 0xBB,\n\tPROGRAM_MAP: 0xBC,\n\tPRIVATE_1: 0xBD,\n\tPADDING: 0xBE,\n\tPRIVATE_2: 0xBF,\n\tAUDIO_1: 0xC0,\n\tVIDEO_1: 0xE0,\n\tDIRECTORY: 0xFF\n};\n\nreturn MJpeg;\n\n})();\n\n*/\n","JSMpeg.Decoder.MPEG1Video = (function(){ \"use strict\";\n\n// Inspired by Java MPEG-1 Video Decoder and Player by Zoltan Korandi \n// https://sourceforge.net/projects/javampeg1video/\n\nvar MPEG1 = function(options) {\n\tJSMpeg.Decoder.Base.call(this, options);\n\n\tvar bufferSize = options.videoBufferSize || 512*1024;\n\tvar bufferMode = options.streaming\n\t\t? JSMpeg.BitBuffer.MODE.EVICT\n\t\t: JSMpeg.BitBuffer.MODE.EXPAND;\n\n\tthis.bits = new JSMpeg.BitBuffer(bufferSize, bufferMode);\n\n\tthis.customIntraQuantMatrix = new Uint8Array(64);\n\tthis.customNonIntraQuantMatrix = new Uint8Array(64);\n\tthis.blockData = new Int32Array(64);\n\n\tthis.currentFrame = 0;\n\tthis.decodeFirstFrame = options.decodeFirstFrame !== false;\n};\n\nMPEG1.prototype = Object.create(JSMpeg.Decoder.Base.prototype);\nMPEG1.prototype.constructor = MPEG1;\n\nMPEG1.prototype.write = function(pts, buffers) {\n\tJSMpeg.Decoder.Base.prototype.write.call(this, pts, buffers);\n\n\tif (!this.hasSequenceHeader) {\n\t\tif (this.bits.findStartCode(MPEG1.START.SEQUENCE) === -1) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.decodeSequenceHeader();\n\n\t\tif (this.decodeFirstFrame) {\n\t\t\tthis.decode();\n\t\t}\n\t}\n};\n\nMPEG1.prototype.decode = function() {\n\tif (!this.hasSequenceHeader) {\n\t\treturn false;\n\t}\n\n\tif (this.bits.findStartCode(MPEG1.START.PICTURE) === -1) {\n\t\tvar bufferedBytes = this.bits.byteLength - (this.bits.index >> 3);\n\t\treturn false;\n\t}\n\n\tthis.decodePicture();\n\tthis.advanceDecodedTime(1/this.frameRate);\n\treturn true;\n};\n\nMPEG1.prototype.readHuffman = function(codeTable) {\n\tvar state = 0;\n\tdo {\n\t\tstate = codeTable[state + this.bits.read(1)];\n\t} while (state >= 0 && codeTable[state] !== 0);\n\treturn codeTable[state+2];\n};\n\n\n// Sequence Layer\n\nMPEG1.prototype.frameRate = 30;\nMPEG1.prototype.decodeSequenceHeader = function() {\n\tvar newWidth = this.bits.read(12),\n\t\tnewHeight = this.bits.read(12);\n\n\t// skip pixel aspect ratio\n\tthis.bits.skip(4);\n\n\tthis.frameRate = MPEG1.PICTURE_RATE[this.bits.read(4)];\n\n\t// skip bitRate, marker, bufferSize and constrained bit\n\tthis.bits.skip(18 + 1 + 10 + 1);\n\n\tif (newWidth !== this.width || newHeight !== this.height) {\n\t\tthis.width = newWidth;\n\t\tthis.height = newHeight;\n\n\t\tthis.initBuffers();\n\n\t\tif (this.destination) {\n\t\t\tthis.destination.resize(newWidth, newHeight);\n\t\t}\n\t}\n\n\tif (this.bits.read(1)) { // load custom intra quant matrix?\n\t\tfor (var i = 0; i < 64; i++) {\n\t\t\tthis.customIntraQuantMatrix[MPEG1.ZIG_ZAG[i]] = this.bits.read(8);\n\t\t}\n\t\tthis.intraQuantMatrix = this.customIntraQuantMatrix;\n\t}\n\n\tif (this.bits.read(1)) { // load custom non intra quant matrix?\n\t\tfor (var i = 0; i < 64; i++) {\n\t\t\tvar idx = MPEG1.ZIG_ZAG[i];\n\t\t\tthis.customNonIntraQuantMatrix[idx] = this.bits.read(8);\n\t\t}\n\t\tthis.nonIntraQuantMatrix = this.customNonIntraQuantMatrix;\n\t}\n\n\tthis.hasSequenceHeader = true;\n};\n\nMPEG1.prototype.initBuffers = function() {\n\tthis.intraQuantMatrix = MPEG1.DEFAULT_INTRA_QUANT_MATRIX;\n\tthis.nonIntraQuantMatrix = MPEG1.DEFAULT_NON_INTRA_QUANT_MATRIX;\n\n\tthis.mbWidth = (this.width + 15) >> 4;\n\tthis.mbHeight = (this.height + 15) >> 4;\n\tthis.mbSize = this.mbWidth * this.mbHeight;\n\n\tthis.codedWidth = this.mbWidth << 4;\n\tthis.codedHeight = this.mbHeight << 4;\n\tthis.codedSize = this.codedWidth * this.codedHeight;\n\n\tthis.halfWidth = this.mbWidth << 3;\n\tthis.halfHeight = this.mbHeight << 3;\n\n\t// Allocated buffers and resize the canvas\n\tthis.currentY = new Uint8ClampedArray(this.codedSize);\n\tthis.currentY32 = new Uint32Array(this.currentY.buffer);\n\n\tthis.currentCr = new Uint8ClampedArray(this.codedSize >> 2);\n\tthis.currentCr32 = new Uint32Array(this.currentCr.buffer);\n\n\tthis.currentCb = new Uint8ClampedArray(this.codedSize >> 2);\n\tthis.currentCb32 = new Uint32Array(this.currentCb.buffer);\n\n\n\tthis.forwardY = new Uint8ClampedArray(this.codedSize);\n\tthis.forwardY32 = new Uint32Array(this.forwardY.buffer);\n\n\tthis.forwardCr = new Uint8ClampedArray(this.codedSize >> 2);\n\tthis.forwardCr32 = new Uint32Array(this.forwardCr.buffer);\n\n\tthis.forwardCb = new Uint8ClampedArray(this.codedSize >> 2);\n\tthis.forwardCb32 = new Uint32Array(this.forwardCb.buffer);\n};\n\n\n// Picture Layer\n\nMPEG1.prototype.currentY = null;\nMPEG1.prototype.currentCr = null;\nMPEG1.prototype.currentCb = null;\n\nMPEG1.prototype.pictureType = 0;\n\n// Buffers for motion compensation\nMPEG1.prototype.forwardY = null;\nMPEG1.prototype.forwardCr = null;\nMPEG1.prototype.forwardCb = null;\n\nMPEG1.prototype.fullPelForward = false;\nMPEG1.prototype.forwardFCode = 0;\nMPEG1.prototype.forwardRSize = 0;\nMPEG1.prototype.forwardF = 0;\n\nMPEG1.prototype.decodePicture = function(skipOutput) {\n\tthis.currentFrame++;\n\n\tthis.bits.skip(10); // skip temporalReference\n\tthis.pictureType = this.bits.read(3);\n\tthis.bits.skip(16); // skip vbv_delay\n\n\t// Skip B and D frames or unknown coding type\n\tif (this.pictureType <= 0 || this.pictureType >= MPEG1.PICTURE_TYPE.B) {\n\t\treturn;\n\t}\n\n\t// full_pel_forward, forward_f_code\n\tif (this.pictureType === MPEG1.PICTURE_TYPE.PREDICTIVE) {\n\t\tthis.fullPelForward = this.bits.read(1);\n\t\tthis.forwardFCode = this.bits.read(3);\n\t\tif (this.forwardFCode === 0) {\n\t\t\t// Ignore picture with zero forward_f_code\n\t\t\treturn;\n\t\t}\n\t\tthis.forwardRSize = this.forwardFCode - 1;\n\t\tthis.forwardF = 1 << this.forwardRSize;\n\t}\n\n\tvar code = 0;\n\tdo {\n\t\tcode = this.bits.findNextStartCode();\n\t} while (code === MPEG1.START.EXTENSION || code === MPEG1.START.USER_DATA );\n\n\n\twhile (code >= MPEG1.START.SLICE_FIRST && code <= MPEG1.START.SLICE_LAST) {\n\t\tthis.decodeSlice(code & 0x000000FF);\n\t\tcode = this.bits.findNextStartCode();\n\t}\n\n\tif (code !== -1) {\n\t\t// We found the next start code; rewind 32bits and let the main loop\n\t\t// handle it.\n\t\tthis.bits.rewind(32);\n\t}\n\n\t// Invoke decode callbacks\n\tif (this.destination) {\n\t\tthis.destination.render(this.currentY, this.currentCr, this.currentCb);\n\t}\n\n\tif (typeof JSMpeg.on_intra_rendered === \"function\") { \n\t\tif (this.pictureType === MPEG1.PICTURE_TYPE.INTRA) {\n\t\t\tJSMpeg.on_intra_rendered(this.currentY, this.currentCr, this.currentCb, this.source);\n\t\t}\n\t}\n\n\n\t// If this is a reference picutre then rotate the prediction pointers\n\tif (\n\t\tthis.pictureType === MPEG1.PICTURE_TYPE.INTRA ||\n\t\tthis.pictureType === MPEG1.PICTURE_TYPE.PREDICTIVE\n\t) {\n\t\tvar\n\t\t\ttmpY = this.forwardY,\n\t\t\ttmpY32 = this.forwardY32,\n\t\t\ttmpCr = this.forwardCr,\n\t\t\ttmpCr32 = this.forwardCr32,\n\t\t\ttmpCb = this.forwardCb,\n\t\t\ttmpCb32 = this.forwardCb32;\n\n\t\tthis.forwardY = this.currentY;\n\t\tthis.forwardY32 = this.currentY32;\n\t\tthis.forwardCr = this.currentCr;\n\t\tthis.forwardCr32 = this.currentCr32;\n\t\tthis.forwardCb = this.currentCb;\n\t\tthis.forwardCb32 = this.currentCb32;\n\n\t\tthis.currentY = tmpY;\n\t\tthis.currentY32 = tmpY32;\n\t\tthis.currentCr = tmpCr;\n\t\tthis.currentCr32 = tmpCr32;\n\t\tthis.currentCb = tmpCb;\n\t\tthis.currentCb32 = tmpCb32;\n\t}\n};\n\n\n// Slice Layer\n\nMPEG1.prototype.quantizerScale = 0;\nMPEG1.prototype.sliceBegin = false;\n\nMPEG1.prototype.decodeSlice = function(slice) {\n\tthis.sliceBegin = true;\n\tthis.macroblockAddress = (slice - 1) * this.mbWidth - 1;\n\n\t// Reset motion vectors and DC predictors\n\tthis.motionFwH = this.motionFwHPrev = 0;\n\tthis.motionFwV = this.motionFwVPrev = 0;\n\tthis.dcPredictorY  = 128;\n\tthis.dcPredictorCr = 128;\n\tthis.dcPredictorCb = 128;\n\n\tthis.quantizerScale = this.bits.read(5);\n\n\t// skip extra bits\n\twhile (this.bits.read(1)) {\n\t\tthis.bits.skip(8);\n\t}\n\n\tdo {\n\t\tthis.decodeMacroblock();\n\t} while (!this.bits.nextBytesAreStartCode());\n};\n\n\n// Macroblock Layer\n\nMPEG1.prototype.macroblockAddress = 0;\nMPEG1.prototype.mbRow = 0;\nMPEG1.prototype.mbCol = 0;\n\nMPEG1.prototype.macroblockType = 0;\nMPEG1.prototype.macroblockIntra = false;\nMPEG1.prototype.macroblockMotFw = false;\n\nMPEG1.prototype.motionFwH = 0;\nMPEG1.prototype.motionFwV = 0;\nMPEG1.prototype.motionFwHPrev = 0;\nMPEG1.prototype.motionFwVPrev = 0;\n\nMPEG1.prototype.decodeMacroblock = function() {\n\t// Decode macroblock_address_increment\n\tvar\n\t\tincrement = 0,\n\t\tt = this.readHuffman(MPEG1.MACROBLOCK_ADDRESS_INCREMENT);\n\n\twhile (t === 34) {\n\t\t// macroblock_stuffing\n\t\tt = this.readHuffman(MPEG1.MACROBLOCK_ADDRESS_INCREMENT);\n\t}\n\twhile (t === 35) {\n\t\t// macroblock_escape\n\t\tincrement += 33;\n\t\tt = this.readHuffman(MPEG1.MACROBLOCK_ADDRESS_INCREMENT);\n\t}\n\tincrement += t;\n\n\t// Process any skipped macroblocks\n\tif (this.sliceBegin) {\n\t\t// The first macroblock_address_increment of each slice is relative\n\t\t// to beginning of the preverious row, not the preverious macroblock\n\t\tthis.sliceBegin = false;\n\t\tthis.macroblockAddress += increment;\n\t}\n\telse {\n\t\tif (this.macroblockAddress + increment >= this.mbSize) {\n\t\t\t// Illegal (too large) macroblock_address_increment\n\t\t\treturn;\n\t\t}\n\t\tif (increment > 1) {\n\t\t\t// Skipped macroblocks reset DC predictors\n\t\t\tthis.dcPredictorY  = 128;\n\t\t\tthis.dcPredictorCr = 128;\n\t\t\tthis.dcPredictorCb = 128;\n\n\t\t\t// Skipped macroblocks in P-pictures reset motion vectors\n\t\t\tif (this.pictureType === MPEG1.PICTURE_TYPE.PREDICTIVE) {\n\t\t\t\tthis.motionFwH = this.motionFwHPrev = 0;\n\t\t\t\tthis.motionFwV = this.motionFwVPrev = 0;\n\t\t\t}\n\t\t}\n\n\t\t// Predict skipped macroblocks\n\t\twhile (increment > 1) {\n\t\t\tthis.macroblockAddress++;\n\t\t\tthis.mbRow = (this.macroblockAddress / this.mbWidth)|0;\n\t\t\tthis.mbCol = this.macroblockAddress % this.mbWidth;\n\t\t\tthis.copyMacroblock(\n\t\t\t\tthis.motionFwH, this.motionFwV,\n\t\t\t\tthis.forwardY, this.forwardCr, this.forwardCb\n\t\t\t);\n\t\t\tincrement--;\n\t\t}\n\t\tthis.macroblockAddress++;\n\t}\n\tthis.mbRow = (this.macroblockAddress / this.mbWidth)|0;\n\tthis.mbCol = this.macroblockAddress % this.mbWidth;\n\n\t// Process the current macroblock\n\tvar mbTable = MPEG1.MACROBLOCK_TYPE[this.pictureType];\n\tthis.macroblockType = this.readHuffman(mbTable);\n\tthis.macroblockIntra = (this.macroblockType & 0x01);\n\tthis.macroblockMotFw = (this.macroblockType & 0x08);\n\n\t// Quantizer scale\n\tif ((this.macroblockType & 0x10) !== 0) {\n\t\tthis.quantizerScale = this.bits.read(5);\n\t}\n\n\tif (this.macroblockIntra) {\n\t\t// Intra-coded macroblocks reset motion vectors\n\t\tthis.motionFwH = this.motionFwHPrev = 0;\n\t\tthis.motionFwV = this.motionFwVPrev = 0;\n\t}\n\telse {\n\t\t// Non-intra macroblocks reset DC predictors\n\t\tthis.dcPredictorY = 128;\n\t\tthis.dcPredictorCr = 128;\n\t\tthis.dcPredictorCb = 128;\n\n\t\tthis.decodeMotionVectors();\n\t\tthis.copyMacroblock(\n\t\t\tthis.motionFwH, this.motionFwV,\n\t\t\tthis.forwardY, this.forwardCr, this.forwardCb\n\t\t);\n\t}\n\n\t// Decode blocks\n\tvar cbp = ((this.macroblockType & 0x02) !== 0)\n\t\t? this.readHuffman(MPEG1.CODE_BLOCK_PATTERN)\n\t\t: (this.macroblockIntra ? 0x3f : 0);\n\n\tfor (var block = 0, mask = 0x20; block < 6; block++) {\n\t\tif ((cbp & mask) !== 0) {\n\t\t\tthis.decodeBlock(block);\n\t\t}\n\t\tmask >>= 1;\n\t}\n};\n\n\nMPEG1.prototype.decodeMotionVectors = function() {\n\tvar code, d, r = 0;\n\n\t// Forward\n\tif (this.macroblockMotFw) {\n\t\t// Horizontal forward\n\t\tcode = this.readHuffman(MPEG1.MOTION);\n\t\tif ((code !== 0) && (this.forwardF !== 1)) {\n\t\t\tr = this.bits.read(this.forwardRSize);\n\t\t\td = ((Math.abs(code) - 1) << this.forwardRSize) + r + 1;\n\t\t\tif (code < 0) {\n\t\t\t\td = -d;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\td = code;\n\t\t}\n\n\t\tthis.motionFwHPrev += d;\n\t\tif (this.motionFwHPrev > (this.forwardF << 4) - 1) {\n\t\t\tthis.motionFwHPrev -= this.forwardF << 5;\n\t\t}\n\t\telse if (this.motionFwHPrev < ((-this.forwardF) << 4)) {\n\t\t\tthis.motionFwHPrev += this.forwardF << 5;\n\t\t}\n\n\t\tthis.motionFwH = this.motionFwHPrev;\n\t\tif (this.fullPelForward) {\n\t\t\tthis.motionFwH <<= 1;\n\t\t}\n\n\t\t// Vertical forward\n\t\tcode = this.readHuffman(MPEG1.MOTION);\n\t\tif ((code !== 0) && (this.forwardF !== 1)) {\n\t\t\tr = this.bits.read(this.forwardRSize);\n\t\t\td = ((Math.abs(code) - 1) << this.forwardRSize) + r + 1;\n\t\t\tif (code < 0) {\n\t\t\t\td = -d;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\td = code;\n\t\t}\n\n\t\tthis.motionFwVPrev += d;\n\t\tif (this.motionFwVPrev > (this.forwardF << 4) - 1) {\n\t\t\tthis.motionFwVPrev -= this.forwardF << 5;\n\t\t}\n\t\telse if (this.motionFwVPrev < ((-this.forwardF) << 4)) {\n\t\t\tthis.motionFwVPrev += this.forwardF << 5;\n\t\t}\n\n\t\tthis.motionFwV = this.motionFwVPrev;\n\t\tif (this.fullPelForward) {\n\t\t\tthis.motionFwV <<= 1;\n\t\t}\n\t}\n\telse if (this.pictureType === MPEG1.PICTURE_TYPE.PREDICTIVE) {\n\t\t// No motion information in P-picture, reset vectors\n\t\tthis.motionFwH = this.motionFwHPrev = 0;\n\t\tthis.motionFwV = this.motionFwVPrev = 0;\n\t}\n};\n\nMPEG1.prototype.copyMacroblock = function(motionH, motionV, sY, sCr, sCb) {\n\tvar\n\t\twidth, scan,\n\t\tH, V, oddH, oddV,\n\t\tsrc, dest, last;\n\n\t// We use 32bit writes here\n\tvar dY = this.currentY32,\n\t\tdCb = this.currentCb32,\n\t\tdCr = this.currentCr32;\n\n\t// Luminance\n\twidth = this.codedWidth;\n\tscan = width - 16;\n\n\tH = motionH >> 1;\n\tV = motionV >> 1;\n\toddH = (motionH & 1) === 1;\n\toddV = (motionV & 1) === 1;\n\n\tsrc = ((this.mbRow << 4) + V) * width + (this.mbCol << 4) + H;\n\tdest = (this.mbRow * width + this.mbCol) << 2;\n\tlast = dest + (width << 2);\n\n\tvar x, y1, y2, y;\n\tif (oddH) {\n\t\tif (oddV) {\n\t\t\twhile (dest < last) {\n\t\t\t\ty1 = sY[src] + sY[src+width]; src++;\n\t\t\t\tfor (x = 0; x < 4; x++) {\n\t\t\t\t\ty2 = sY[src] + sY[src+width]; src++;\n\t\t\t\t\ty = (((y1 + y2 + 2) >> 2) & 0xff);\n\n\t\t\t\t\ty1 = sY[src] + sY[src+width]; src++;\n\t\t\t\t\ty |= (((y1 + y2 + 2) << 6) & 0xff00);\n\n\t\t\t\t\ty2 = sY[src] + sY[src+width]; src++;\n\t\t\t\t\ty |= (((y1 + y2 + 2) << 14) & 0xff0000);\n\n\t\t\t\t\ty1 = sY[src] + sY[src+width]; src++;\n\t\t\t\t\ty |= (((y1 + y2 + 2) << 22) & 0xff000000);\n\n\t\t\t\t\tdY[dest++] = y;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan-1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (dest < last) {\n\t\t\t\ty1 = sY[src++];\n\t\t\t\tfor (x = 0; x < 4; x++) {\n\t\t\t\t\ty2 = sY[src++];\n\t\t\t\t\ty = (((y1 + y2 + 1) >> 1) & 0xff);\n\n\t\t\t\t\ty1 = sY[src++];\n\t\t\t\t\ty |= (((y1 + y2 + 1) << 7) & 0xff00);\n\n\t\t\t\t\ty2 = sY[src++];\n\t\t\t\t\ty |= (((y1 + y2 + 1) << 15) & 0xff0000);\n\n\t\t\t\t\ty1 = sY[src++];\n\t\t\t\t\ty |= (((y1 + y2 + 1) << 23) & 0xff000000);\n\n\t\t\t\t\tdY[dest++] = y;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan-1;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tif (oddV) {\n\t\t\twhile (dest < last) {\n\t\t\t\tfor (x = 0; x < 4; x++) {\n\t\t\t\t\ty = (((sY[src] + sY[src+width] + 1) >> 1) & 0xff); src++;\n\t\t\t\t\ty |= (((sY[src] + sY[src+width] + 1) << 7) & 0xff00); src++;\n\t\t\t\t\ty |= (((sY[src] + sY[src+width] + 1) << 15) & 0xff0000); src++;\n\t\t\t\t\ty |= (((sY[src] + sY[src+width] + 1) << 23) & 0xff000000); src++;\n\n\t\t\t\t\tdY[dest++] = y;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (dest < last) {\n\t\t\t\tfor (x = 0; x < 4; x++) {\n\t\t\t\t\ty = sY[src]; src++;\n\t\t\t\t\ty |= sY[src] << 8; src++;\n\t\t\t\t\ty |= sY[src] << 16; src++;\n\t\t\t\t\ty |= sY[src] << 24; src++;\n\n\t\t\t\t\tdY[dest++] = y;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Chrominance\n\n\twidth = this.halfWidth;\n\tscan = width - 8;\n\n\tH = (motionH/2) >> 1;\n\tV = (motionV/2) >> 1;\n\toddH = ((motionH/2) & 1) === 1;\n\toddV = ((motionV/2) & 1) === 1;\n\n\tsrc = ((this.mbRow << 3) + V) * width + (this.mbCol << 3) + H;\n\tdest = (this.mbRow * width + this.mbCol) << 1;\n\tlast = dest + (width << 1);\n\n\tvar cr1, cr2, cr,\n\t\tcb1, cb2, cb;\n\tif (oddH) {\n\t\tif (oddV) {\n\t\t\twhile (dest < last) {\n\t\t\t\tcr1 = sCr[src] + sCr[src+width];\n\t\t\t\tcb1 = sCb[src] + sCb[src+width];\n\t\t\t\tsrc++;\n\t\t\t\tfor (x = 0; x < 2; x++) {\n\t\t\t\t\tcr2 = sCr[src] + sCr[src+width];\n\t\t\t\t\tcb2 = sCb[src] + sCb[src+width]; src++;\n\t\t\t\t\tcr = (((cr1 + cr2 + 2) >> 2) & 0xff);\n\t\t\t\t\tcb = (((cb1 + cb2 + 2) >> 2) & 0xff);\n\n\t\t\t\t\tcr1 = sCr[src] + sCr[src+width];\n\t\t\t\t\tcb1 = sCb[src] + sCb[src+width]; src++;\n\t\t\t\t\tcr |= (((cr1 + cr2 + 2) << 6) & 0xff00);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 2) << 6) & 0xff00);\n\n\t\t\t\t\tcr2 = sCr[src] + sCr[src+width];\n\t\t\t\t\tcb2 = sCb[src] + sCb[src+width]; src++;\n\t\t\t\t\tcr |= (((cr1 + cr2 + 2) << 14) & 0xff0000);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 2) << 14) & 0xff0000);\n\n\t\t\t\t\tcr1 = sCr[src] + sCr[src+width];\n\t\t\t\t\tcb1 = sCb[src] + sCb[src+width]; src++;\n\t\t\t\t\tcr |= (((cr1 + cr2 + 2) << 22) & 0xff000000);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 2) << 22) & 0xff000000);\n\n\t\t\t\t\tdCr[dest] = cr;\n\t\t\t\t\tdCb[dest] = cb;\n\t\t\t\t\tdest++;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan-1;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (dest < last) {\n\t\t\t\tcr1 = sCr[src];\n\t\t\t\tcb1 = sCb[src];\n\t\t\t\tsrc++;\n\t\t\t\tfor (x = 0; x < 2; x++) {\n\t\t\t\t\tcr2 = sCr[src];\n\t\t\t\t\tcb2 = sCb[src++];\n\t\t\t\t\tcr = (((cr1 + cr2 + 1) >> 1) & 0xff);\n\t\t\t\t\tcb = (((cb1 + cb2 + 1) >> 1) & 0xff);\n\n\t\t\t\t\tcr1 = sCr[src];\n\t\t\t\t\tcb1 = sCb[src++];\n\t\t\t\t\tcr |= (((cr1 + cr2 + 1) << 7) & 0xff00);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 1) << 7) & 0xff00);\n\n\t\t\t\t\tcr2 = sCr[src];\n\t\t\t\t\tcb2 = sCb[src++];\n\t\t\t\t\tcr |= (((cr1 + cr2 + 1) << 15) & 0xff0000);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 1) << 15) & 0xff0000);\n\n\t\t\t\t\tcr1 = sCr[src];\n\t\t\t\t\tcb1 = sCb[src++];\n\t\t\t\t\tcr |= (((cr1 + cr2 + 1) << 23) & 0xff000000);\n\t\t\t\t\tcb |= (((cb1 + cb2 + 1) << 23) & 0xff000000);\n\n\t\t\t\t\tdCr[dest] = cr;\n\t\t\t\t\tdCb[dest] = cb;\n\t\t\t\t\tdest++;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan-1;\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tif (oddV) {\n\t\t\twhile (dest < last) {\n\t\t\t\tfor (x = 0; x < 2; x++) {\n\t\t\t\t\tcr = (((sCr[src] + sCr[src+width] + 1) >> 1) & 0xff);\n\t\t\t\t\tcb = (((sCb[src] + sCb[src+width] + 1) >> 1) & 0xff); src++;\n\n\t\t\t\t\tcr |= (((sCr[src] + sCr[src+width] + 1) << 7) & 0xff00);\n\t\t\t\t\tcb |= (((sCb[src] + sCb[src+width] + 1) << 7) & 0xff00); src++;\n\n\t\t\t\t\tcr |= (((sCr[src] + sCr[src+width] + 1) << 15) & 0xff0000);\n\t\t\t\t\tcb |= (((sCb[src] + sCb[src+width] + 1) << 15) & 0xff0000); src++;\n\n\t\t\t\t\tcr |= (((sCr[src] + sCr[src+width] + 1) << 23) & 0xff000000);\n\t\t\t\t\tcb |= (((sCb[src] + sCb[src+width] + 1) << 23) & 0xff000000); src++;\n\n\t\t\t\t\tdCr[dest] = cr;\n\t\t\t\t\tdCb[dest] = cb;\n\t\t\t\t\tdest++;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\twhile (dest < last) {\n\t\t\t\tfor (x = 0; x < 2; x++) {\n\t\t\t\t\tcr = sCr[src];\n\t\t\t\t\tcb = sCb[src]; src++;\n\n\t\t\t\t\tcr |= sCr[src] << 8;\n\t\t\t\t\tcb |= sCb[src] << 8; src++;\n\n\t\t\t\t\tcr |= sCr[src] << 16;\n\t\t\t\t\tcb |= sCb[src] << 16; src++;\n\n\t\t\t\t\tcr |= sCr[src] << 24;\n\t\t\t\t\tcb |= sCb[src] << 24; src++;\n\n\t\t\t\t\tdCr[dest] = cr;\n\t\t\t\t\tdCb[dest] = cb;\n\t\t\t\t\tdest++;\n\t\t\t\t}\n\t\t\t\tdest += scan >> 2; src += scan;\n\t\t\t}\n\t\t}\n\t}\n};\n\n\n// Block layer\n\nMPEG1.prototype.dcPredictorY = 0;\nMPEG1.prototype.dcPredictorCr = 0;\nMPEG1.prototype.dcPredictorCb = 0;\n\nMPEG1.prototype.blockData = null;\n\nMPEG1.prototype.decodeBlock = function(block) {\n\n\tvar\n\t\tn = 0,\n\t\tquantMatrix;\n\n\t// Decode DC coefficient of intra-coded blocks\n\tif (this.macroblockIntra) {\n\t\tvar\n\t\t\tpredictor,\n\t\t\tdctSize;\n\n\t\t// DC prediction\n\n\t\tif (block < 4) {\n\t\t\tpredictor = this.dcPredictorY;\n\t\t\tdctSize = this.readHuffman(MPEG1.DCT_DC_SIZE_LUMINANCE);\n\t\t}\n\t\telse {\n\t\t\tpredictor = (block === 4 ? this.dcPredictorCr : this.dcPredictorCb);\n\t\t\tdctSize = this.readHuffman(MPEG1.DCT_DC_SIZE_CHROMINANCE);\n\t\t}\n\n\t\t// Read DC coeff\n\t\tif (dctSize > 0) {\n\t\t\tvar differential = this.bits.read(dctSize);\n\t\t\tif ((differential & (1 << (dctSize - 1))) !== 0) {\n\t\t\t\tthis.blockData[0] = predictor + differential;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.blockData[0] = predictor + ((-1 << dctSize)|(differential+1));\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthis.blockData[0] = predictor;\n\t\t}\n\n\t\t// Save predictor value\n\t\tif (block < 4) {\n\t\t\tthis.dcPredictorY = this.blockData[0];\n\t\t}\n\t\telse if (block === 4) {\n\t\t\tthis.dcPredictorCr = this.blockData[0];\n\t\t}\n\t\telse {\n\t\t\tthis.dcPredictorCb = this.blockData[0];\n\t\t}\n\n\t\t// Dequantize + premultiply\n\t\tthis.blockData[0] <<= (3 + 5);\n\n\t\tquantMatrix = this.intraQuantMatrix;\n\t\tn = 1;\n\t}\n\telse {\n\t\tquantMatrix = this.nonIntraQuantMatrix;\n\t}\n\n\t// Decode AC coefficients (+DC for non-intra)\n\tvar level = 0;\n\twhile (true) {\n\t\tvar\n\t\t\trun = 0,\n\t\t\tcoeff = this.readHuffman(MPEG1.DCT_COEFF);\n\n\t\tif ((coeff === 0x0001) && (n > 0) && (this.bits.read(1) === 0)) {\n\t\t\t// end_of_block\n\t\t\tbreak;\n\t\t}\n\t\tif (coeff === 0xffff) {\n\t\t\t// escape\n\t\t\trun = this.bits.read(6);\n\t\t\tlevel = this.bits.read(8);\n\t\t\tif (level === 0) {\n\t\t\t\tlevel = this.bits.read(8);\n\t\t\t}\n\t\t\telse if (level === 128) {\n\t\t\t\tlevel = this.bits.read(8) - 256;\n\t\t\t}\n\t\t\telse if (level > 128) {\n\t\t\t\tlevel = level - 256;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\trun = coeff >> 8;\n\t\t\tlevel = coeff & 0xff;\n\t\t\tif (this.bits.read(1)) {\n\t\t\t\tlevel = -level;\n\t\t\t}\n\t\t}\n\n\t\tn += run;\n\t\tvar dezigZagged = MPEG1.ZIG_ZAG[n];\n\t\tn++;\n\n\t\t// Dequantize, oddify, clip\n\t\tlevel <<= 1;\n\t\tif (!this.macroblockIntra) {\n\t\t\tlevel += (level < 0 ? -1 : 1);\n\t\t}\n\t\tlevel = (level * this.quantizerScale * quantMatrix[dezigZagged]) >> 4;\n\t\tif ((level & 1) === 0) {\n\t\t\tlevel -= level > 0 ? 1 : -1;\n\t\t}\n\t\tif (level > 2047) {\n\t\t\tlevel = 2047;\n\t\t}\n\t\telse if (level < -2048) {\n\t\t\tlevel = -2048;\n\t\t}\n\n\t\t// Save premultiplied coefficient\n\t\tthis.blockData[dezigZagged] = level * MPEG1.PREMULTIPLIER_MATRIX[dezigZagged];\n\t}\n\n\t// Move block to its place\n\tvar\n\t\tdestArray,\n\t\tdestIndex,\n\t\tscan;\n\n\tif (block < 4) {\n\t\tdestArray = this.currentY;\n\t\tscan = this.codedWidth - 8;\n\t\tdestIndex = (this.mbRow * this.codedWidth + this.mbCol) << 4;\n\t\tif ((block & 1) !== 0) {\n\t\t\tdestIndex += 8;\n\t\t}\n\t\tif ((block & 2) !== 0) {\n\t\t\tdestIndex += this.codedWidth << 3;\n\t\t}\n\t}\n\telse {\n\t\tdestArray = (block === 4) ? this.currentCb : this.currentCr;\n\t\tscan = (this.codedWidth >> 1) - 8;\n\t\tdestIndex = ((this.mbRow * this.codedWidth) << 2) + (this.mbCol << 3);\n\t}\n\n\tif (this.macroblockIntra) {\n\t\t// Overwrite (no prediction)\n\t\tif (n === 1) {\n\t\t\tMPEG1.CopyValueToDestination((this.blockData[0] + 128) >> 8, destArray, destIndex, scan);\n\t\t\tthis.blockData[0] = 0;\n\t\t}\n\t\telse {\n\t\t\tMPEG1.IDCT(this.blockData);\n\t\t\tMPEG1.CopyBlockToDestination(this.blockData, destArray, destIndex, scan);\n\t\t\tJSMpeg.Fill(this.blockData, 0);\n\t\t}\n\t}\n\telse {\n\t\t// Add data to the predicted macroblock\n\t\tif (n === 1) {\n\t\t\tMPEG1.AddValueToDestination((this.blockData[0] + 128) >> 8, destArray, destIndex, scan);\n\t\t\tthis.blockData[0] = 0;\n\t\t}\n\t\telse {\n\t\t\tMPEG1.IDCT(this.blockData);\n\t\t\tMPEG1.AddBlockToDestination(this.blockData, destArray, destIndex, scan);\n\t\t\tJSMpeg.Fill(this.blockData, 0);\n\t\t}\n\t}\n\n\tn = 0;\n};\n\nMPEG1.CopyBlockToDestination = function(block, dest, index, scan) {\n\tfor (var n = 0; n < 64; n += 8, index += scan+8) {\n\t\tdest[index+0] = block[n+0];\n\t\tdest[index+1] = block[n+1];\n\t\tdest[index+2] = block[n+2];\n\t\tdest[index+3] = block[n+3];\n\t\tdest[index+4] = block[n+4];\n\t\tdest[index+5] = block[n+5];\n\t\tdest[index+6] = block[n+6];\n\t\tdest[index+7] = block[n+7];\n\t}\n};\n\nMPEG1.AddBlockToDestination = function(block, dest, index, scan) {\n\tfor (var n = 0; n < 64; n += 8, index += scan+8) {\n\t\tdest[index+0] += block[n+0];\n\t\tdest[index+1] += block[n+1];\n\t\tdest[index+2] += block[n+2];\n\t\tdest[index+3] += block[n+3];\n\t\tdest[index+4] += block[n+4];\n\t\tdest[index+5] += block[n+5];\n\t\tdest[index+6] += block[n+6];\n\t\tdest[index+7] += block[n+7];\n\t}\n};\n\nMPEG1.CopyValueToDestination = function(value, dest, index, scan) {\n\tfor (var n = 0; n < 64; n += 8, index += scan+8) {\n\t\tdest[index+0] = value;\n\t\tdest[index+1] = value;\n\t\tdest[index+2] = value;\n\t\tdest[index+3] = value;\n\t\tdest[index+4] = value;\n\t\tdest[index+5] = value;\n\t\tdest[index+6] = value;\n\t\tdest[index+7] = value;\n\t}\n};\n\nMPEG1.AddValueToDestination = function(value, dest, index, scan) {\n\tfor (var n = 0; n < 64; n += 8, index += scan+8) {\n\t\tdest[index+0] += value;\n\t\tdest[index+1] += value;\n\t\tdest[index+2] += value;\n\t\tdest[index+3] += value;\n\t\tdest[index+4] += value;\n\t\tdest[index+5] += value;\n\t\tdest[index+6] += value;\n\t\tdest[index+7] += value;\n\t}\n};\n\nMPEG1.IDCT = function(block) {\n\t// See http://vsr.informatik.tu-chemnitz.de/~jan/MPEG/HTML/IDCT.html\n\t// for more info.\n\n\tvar\n\t\tb1, b3, b4, b6, b7, tmp1, tmp2, m0,\n\t\tx0, x1, x2, x3, x4, y3, y4, y5, y6, y7;\n\n\t// Transform columns\n\tfor (var i = 0; i < 8; ++i) {\n\t\tb1 = block[4*8+i];\n\t\tb3 = block[2*8+i] + block[6*8+i];\n\t\tb4 = block[5*8+i] - block[3*8+i];\n\t\ttmp1 = block[1*8+i] + block[7*8+i];\n\t\ttmp2 = block[3*8+i] + block[5*8+i];\n\t\tb6 = block[1*8+i] - block[7*8+i];\n\t\tb7 = tmp1 + tmp2;\n\t\tm0 = block[0*8+i];\n\t\tx4 = ((b6*473 - b4*196 + 128) >> 8) - b7;\n\t\tx0 = x4 - (((tmp1 - tmp2)*362 + 128) >> 8);\n\t\tx1 = m0 - b1;\n\t\tx2 = (((block[2*8+i] - block[6*8+i])*362 + 128) >> 8) - b3;\n\t\tx3 = m0 + b1;\n\t\ty3 = x1 + x2;\n\t\ty4 = x3 + b3;\n\t\ty5 = x1 - x2;\n\t\ty6 = x3 - b3;\n\t\ty7 = -x0 - ((b4*473 + b6*196 + 128) >> 8);\n\t\tblock[0*8+i] = b7 + y4;\n\t\tblock[1*8+i] = x4 + y3;\n\t\tblock[2*8+i] = y5 - x0;\n\t\tblock[3*8+i] = y6 - y7;\n\t\tblock[4*8+i] = y6 + y7;\n\t\tblock[5*8+i] = x0 + y5;\n\t\tblock[6*8+i] = y3 - x4;\n\t\tblock[7*8+i] = y4 - b7;\n\t}\n\n\t// Transform rows\n\tfor (var i = 0; i < 64; i += 8) {\n\t\tb1 = block[4+i];\n\t\tb3 = block[2+i] + block[6+i];\n\t\tb4 = block[5+i] - block[3+i];\n\t\ttmp1 = block[1+i] + block[7+i];\n\t\ttmp2 = block[3+i] + block[5+i];\n\t\tb6 = block[1+i] - block[7+i];\n\t\tb7 = tmp1 + tmp2;\n\t\tm0 = block[0+i];\n\t\tx4 = ((b6*473 - b4*196 + 128) >> 8) - b7;\n\t\tx0 = x4 - (((tmp1 - tmp2)*362 + 128) >> 8);\n\t\tx1 = m0 - b1;\n\t\tx2 = (((block[2+i] - block[6+i])*362 + 128) >> 8) - b3;\n\t\tx3 = m0 + b1;\n\t\ty3 = x1 + x2;\n\t\ty4 = x3 + b3;\n\t\ty5 = x1 - x2;\n\t\ty6 = x3 - b3;\n\t\ty7 = -x0 - ((b4*473 + b6*196 + 128) >> 8);\n\t\tblock[0+i] = (b7 + y4 + 128) >> 8;\n\t\tblock[1+i] = (x4 + y3 + 128) >> 8;\n\t\tblock[2+i] = (y5 - x0 + 128) >> 8;\n\t\tblock[3+i] = (y6 - y7 + 128) >> 8;\n\t\tblock[4+i] = (y6 + y7 + 128) >> 8;\n\t\tblock[5+i] = (x0 + y5 + 128) >> 8;\n\t\tblock[6+i] = (y3 - x4 + 128) >> 8;\n\t\tblock[7+i] = (y4 - b7 + 128) >> 8;\n\t}\n};\n\n\n// VLC Tables and Constants\n\nMPEG1.PICTURE_RATE = [\n\t0.000, 23.976, 24.000, 25.000, 29.970, 30.000, 50.000, 59.940,\n\t60.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000\n];\n\nMPEG1.ZIG_ZAG = new Uint8Array([\n\t 0,  1,  8, 16,  9,  2,  3, 10,\n\t17, 24, 32, 25, 18, 11,  4,  5,\n\t12, 19, 26, 33, 40, 48, 41, 34,\n\t27, 20, 13,  6,  7, 14, 21, 28,\n\t35, 42, 49, 56, 57, 50, 43, 36,\n\t29, 22, 15, 23, 30, 37, 44, 51,\n\t58, 59, 52, 45, 38, 31, 39, 46,\n\t53, 60, 61, 54, 47, 55, 62, 63\n]);\n\nMPEG1.DEFAULT_INTRA_QUANT_MATRIX = new Uint8Array([\n\t 8, 16, 19, 22, 26, 27, 29, 34,\n\t16, 16, 22, 24, 27, 29, 34, 37,\n\t19, 22, 26, 27, 29, 34, 34, 38,\n\t22, 22, 26, 27, 29, 34, 37, 40,\n\t22, 26, 27, 29, 32, 35, 40, 48,\n\t26, 27, 29, 32, 35, 40, 48, 58,\n\t26, 27, 29, 34, 38, 46, 56, 69,\n\t27, 29, 35, 38, 46, 56, 69, 83\n]);\n\nMPEG1.DEFAULT_NON_INTRA_QUANT_MATRIX = new Uint8Array([\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16,\n\t16, 16, 16, 16, 16, 16, 16, 16\n]);\n\nMPEG1.PREMULTIPLIER_MATRIX = new Uint8Array([\n\t32, 44, 42, 38, 32, 25, 17,  9,\n\t44, 62, 58, 52, 44, 35, 24, 12,\n\t42, 58, 55, 49, 42, 33, 23, 12,\n\t38, 52, 49, 44, 38, 30, 20, 10,\n\t32, 44, 42, 38, 32, 25, 17,  9,\n\t25, 35, 33, 30, 25, 20, 14,  7,\n\t17, 24, 23, 20, 17, 14,  9,  5,\n\t 9, 12, 12, 10,  9,  7,  5,  2\n]);\n\n// MPEG-1 VLC\n\n//  macroblock_stuffing decodes as 34.\n//  macroblock_escape decodes as 35.\n\nMPEG1.MACROBLOCK_ADDRESS_INCREMENT = new Int16Array([\n\t 1*3,  2*3,  0, //   0\n\t 3*3,  4*3,  0, //   1  0\n\t   0,    0,  1, //   2  1.\n\t 5*3,  6*3,  0, //   3  00\n\t 7*3,  8*3,  0, //   4  01\n\t 9*3, 10*3,  0, //   5  000\n\t11*3, 12*3,  0, //   6  001\n\t   0,    0,  3, //   7  010.\n\t   0,    0,  2, //   8  011.\n\t13*3, 14*3,  0, //   9  0000\n\t15*3, 16*3,  0, //  10  0001\n\t   0,    0,  5, //  11  0010.\n\t   0,    0,  4, //  12  0011.\n\t17*3, 18*3,  0, //  13  0000 0\n\t19*3, 20*3,  0, //  14  0000 1\n\t   0,    0,  7, //  15  0001 0.\n\t   0,    0,  6, //  16  0001 1.\n\t21*3, 22*3,  0, //  17  0000 00\n\t23*3, 24*3,  0, //  18  0000 01\n\t25*3, 26*3,  0, //  19  0000 10\n\t27*3, 28*3,  0, //  20  0000 11\n\t  -1, 29*3,  0, //  21  0000 000\n\t  -1, 30*3,  0, //  22  0000 001\n\t31*3, 32*3,  0, //  23  0000 010\n\t33*3, 34*3,  0, //  24  0000 011\n\t35*3, 36*3,  0, //  25  0000 100\n\t37*3, 38*3,  0, //  26  0000 101\n\t   0,    0,  9, //  27  0000 110.\n\t   0,    0,  8, //  28  0000 111.\n\t39*3, 40*3,  0, //  29  0000 0001\n\t41*3, 42*3,  0, //  30  0000 0011\n\t43*3, 44*3,  0, //  31  0000 0100\n\t45*3, 46*3,  0, //  32  0000 0101\n\t   0,    0, 15, //  33  0000 0110.\n\t   0,    0, 14, //  34  0000 0111.\n\t   0,    0, 13, //  35  0000 1000.\n\t   0,    0, 12, //  36  0000 1001.\n\t   0,    0, 11, //  37  0000 1010.\n\t   0,    0, 10, //  38  0000 1011.\n\t47*3,   -1,  0, //  39  0000 0001 0\n\t  -1, 48*3,  0, //  40  0000 0001 1\n\t49*3, 50*3,  0, //  41  0000 0011 0\n\t51*3, 52*3,  0, //  42  0000 0011 1\n\t53*3, 54*3,  0, //  43  0000 0100 0\n\t55*3, 56*3,  0, //  44  0000 0100 1\n\t57*3, 58*3,  0, //  45  0000 0101 0\n\t59*3, 60*3,  0, //  46  0000 0101 1\n\t61*3,   -1,  0, //  47  0000 0001 00\n\t  -1, 62*3,  0, //  48  0000 0001 11\n\t63*3, 64*3,  0, //  49  0000 0011 00\n\t65*3, 66*3,  0, //  50  0000 0011 01\n\t67*3, 68*3,  0, //  51  0000 0011 10\n\t69*3, 70*3,  0, //  52  0000 0011 11\n\t71*3, 72*3,  0, //  53  0000 0100 00\n\t73*3, 74*3,  0, //  54  0000 0100 01\n\t   0,    0, 21, //  55  0000 0100 10.\n\t   0,    0, 20, //  56  0000 0100 11.\n\t   0,    0, 19, //  57  0000 0101 00.\n\t   0,    0, 18, //  58  0000 0101 01.\n\t   0,    0, 17, //  59  0000 0101 10.\n\t   0,    0, 16, //  60  0000 0101 11.\n\t   0,    0, 35, //  61  0000 0001 000. -- macroblock_escape\n\t   0,    0, 34, //  62  0000 0001 111. -- macroblock_stuffing\n\t   0,    0, 33, //  63  0000 0011 000.\n\t   0,    0, 32, //  64  0000 0011 001.\n\t   0,    0, 31, //  65  0000 0011 010.\n\t   0,    0, 30, //  66  0000 0011 011.\n\t   0,    0, 29, //  67  0000 0011 100.\n\t   0,    0, 28, //  68  0000 0011 101.\n\t   0,    0, 27, //  69  0000 0011 110.\n\t   0,    0, 26, //  70  0000 0011 111.\n\t   0,    0, 25, //  71  0000 0100 000.\n\t   0,    0, 24, //  72  0000 0100 001.\n\t   0,    0, 23, //  73  0000 0100 010.\n\t   0,    0, 22  //  74  0000 0100 011.\n]);\n\n//  macroblock_type bitmap:\n//    0x10  macroblock_quant\n//    0x08  macroblock_motion_forward\n//    0x04  macroblock_motion_backward\n//    0x02  macrobkock_pattern\n//    0x01  macroblock_intra\n//\n\nMPEG1.MACROBLOCK_TYPE_INTRA = new Int8Array([\n\t 1*3,  2*3,     0, //   0\n\t  -1,  3*3,     0, //   1  0\n\t   0,    0,  0x01, //   2  1.\n\t   0,    0,  0x11  //   3  01.\n]);\n\nMPEG1.MACROBLOCK_TYPE_PREDICTIVE = new Int8Array([\n\t 1*3,  2*3,     0, //  0\n\t 3*3,  4*3,     0, //  1  0\n\t   0,    0,  0x0a, //  2  1.\n\t 5*3,  6*3,     0, //  3  00\n\t   0,    0,  0x02, //  4  01.\n\t 7*3,  8*3,     0, //  5  000\n\t   0,    0,  0x08, //  6  001.\n\t 9*3, 10*3,     0, //  7  0000\n\t11*3, 12*3,     0, //  8  0001\n\t  -1, 13*3,     0, //  9  00000\n\t   0,    0,  0x12, // 10  00001.\n\t   0,    0,  0x1a, // 11  00010.\n\t   0,    0,  0x01, // 12  00011.\n\t   0,    0,  0x11  // 13  000001.\n]);\n\nMPEG1.MACROBLOCK_TYPE_B = new Int8Array([\n\t 1*3,  2*3,     0,  //  0\n\t 3*3,  5*3,     0,  //  1  0\n\t 4*3,  6*3,     0,  //  2  1\n\t 8*3,  7*3,     0,  //  3  00\n\t   0,    0,  0x0c,  //  4  10.\n\t 9*3, 10*3,     0,  //  5  01\n\t   0,    0,  0x0e,  //  6  11.\n\t13*3, 14*3,     0,  //  7  001\n\t12*3, 11*3,     0,  //  8  000\n\t   0,    0,  0x04,  //  9  010.\n\t   0,    0,  0x06,  // 10  011.\n\t18*3, 16*3,     0,  // 11  0001\n\t15*3, 17*3,     0,  // 12  0000\n\t   0,    0,  0x08,  // 13  0010.\n\t   0,    0,  0x0a,  // 14  0011.\n\t  -1, 19*3,     0,  // 15  00000\n\t   0,    0,  0x01,  // 16  00011.\n\t20*3, 21*3,     0,  // 17  00001\n\t   0,    0,  0x1e,  // 18  00010.\n\t   0,    0,  0x11,  // 19  000001.\n\t   0,    0,  0x16,  // 20  000010.\n\t   0,    0,  0x1a   // 21  000011.\n]);\n\nMPEG1.MACROBLOCK_TYPE = [\n\tnull,\n\tMPEG1.MACROBLOCK_TYPE_INTRA,\n\tMPEG1.MACROBLOCK_TYPE_PREDICTIVE,\n\tMPEG1.MACROBLOCK_TYPE_B\n];\n\nMPEG1.CODE_BLOCK_PATTERN = new Int16Array([\n\t  2*3,   1*3,   0,  //   0\n\t  3*3,   6*3,   0,  //   1  1\n\t  4*3,   5*3,   0,  //   2  0\n\t  8*3,  11*3,   0,  //   3  10\n\t 12*3,  13*3,   0,  //   4  00\n\t  9*3,   7*3,   0,  //   5  01\n\t 10*3,  14*3,   0,  //   6  11\n\t 20*3,  19*3,   0,  //   7  011\n\t 18*3,  16*3,   0,  //   8  100\n\t 23*3,  17*3,   0,  //   9  010\n\t 27*3,  25*3,   0,  //  10  110\n\t 21*3,  28*3,   0,  //  11  101\n\t 15*3,  22*3,   0,  //  12  000\n\t 24*3,  26*3,   0,  //  13  001\n\t    0,     0,  60,  //  14  111.\n\t 35*3,  40*3,   0,  //  15  0000\n\t 44*3,  48*3,   0,  //  16  1001\n\t 38*3,  36*3,   0,  //  17  0101\n\t 42*3,  47*3,   0,  //  18  1000\n\t 29*3,  31*3,   0,  //  19  0111\n\t 39*3,  32*3,   0,  //  20  0110\n\t    0,     0,  32,  //  21  1010.\n\t 45*3,  46*3,   0,  //  22  0001\n\t 33*3,  41*3,   0,  //  23  0100\n\t 43*3,  34*3,   0,  //  24  0010\n\t    0,     0,   4,  //  25  1101.\n\t 30*3,  37*3,   0,  //  26  0011\n\t    0,     0,   8,  //  27  1100.\n\t    0,     0,  16,  //  28  1011.\n\t    0,     0,  44,  //  29  0111 0.\n\t 50*3,  56*3,   0,  //  30  0011 0\n\t    0,     0,  28,  //  31  0111 1.\n\t    0,     0,  52,  //  32  0110 1.\n\t    0,     0,  62,  //  33  0100 0.\n\t 61*3,  59*3,   0,  //  34  0010 1\n\t 52*3,  60*3,   0,  //  35  0000 0\n\t    0,     0,   1,  //  36  0101 1.\n\t 55*3,  54*3,   0,  //  37  0011 1\n\t    0,     0,  61,  //  38  0101 0.\n\t    0,     0,  56,  //  39  0110 0.\n\t 57*3,  58*3,   0,  //  40  0000 1\n\t    0,     0,   2,  //  41  0100 1.\n\t    0,     0,  40,  //  42  1000 0.\n\t 51*3,  62*3,   0,  //  43  0010 0\n\t    0,     0,  48,  //  44  1001 0.\n\t 64*3,  63*3,   0,  //  45  0001 0\n\t 49*3,  53*3,   0,  //  46  0001 1\n\t    0,     0,  20,  //  47  1000 1.\n\t    0,     0,  12,  //  48  1001 1.\n\t 80*3,  83*3,   0,  //  49  0001 10\n\t    0,     0,  63,  //  50  0011 00.\n\t 77*3,  75*3,   0,  //  51  0010 00\n\t 65*3,  73*3,   0,  //  52  0000 00\n\t 84*3,  66*3,   0,  //  53  0001 11\n\t    0,     0,  24,  //  54  0011 11.\n\t    0,     0,  36,  //  55  0011 10.\n\t    0,     0,   3,  //  56  0011 01.\n\t 69*3,  87*3,   0,  //  57  0000 10\n\t 81*3,  79*3,   0,  //  58  0000 11\n\t 68*3,  71*3,   0,  //  59  0010 11\n\t 70*3,  78*3,   0,  //  60  0000 01\n\t 67*3,  76*3,   0,  //  61  0010 10\n\t 72*3,  74*3,   0,  //  62  0010 01\n\t 86*3,  85*3,   0,  //  63  0001 01\n\t 88*3,  82*3,   0,  //  64  0001 00\n\t   -1,  94*3,   0,  //  65  0000 000\n\t 95*3,  97*3,   0,  //  66  0001 111\n\t    0,     0,  33,  //  67  0010 100.\n\t    0,     0,   9,  //  68  0010 110.\n\t106*3, 110*3,   0,  //  69  0000 100\n\t102*3, 116*3,   0,  //  70  0000 010\n\t    0,     0,   5,  //  71  0010 111.\n\t    0,     0,  10,  //  72  0010 010.\n\t 93*3,  89*3,   0,  //  73  0000 001\n\t    0,     0,   6,  //  74  0010 011.\n\t    0,     0,  18,  //  75  0010 001.\n\t    0,     0,  17,  //  76  0010 101.\n\t    0,     0,  34,  //  77  0010 000.\n\t113*3, 119*3,   0,  //  78  0000 011\n\t103*3, 104*3,   0,  //  79  0000 111\n\t 90*3,  92*3,   0,  //  80  0001 100\n\t109*3, 107*3,   0,  //  81  0000 110\n\t117*3, 118*3,   0,  //  82  0001 001\n\t101*3,  99*3,   0,  //  83  0001 101\n\t 98*3,  96*3,   0,  //  84  0001 110\n\t100*3,  91*3,   0,  //  85  0001 011\n\t114*3, 115*3,   0,  //  86  0001 010\n\t105*3, 108*3,   0,  //  87  0000 101\n\t112*3, 111*3,   0,  //  88  0001 000\n\t121*3, 125*3,   0,  //  89  0000 0011\n\t    0,     0,  41,  //  90  0001 1000.\n\t    0,     0,  14,  //  91  0001 0111.\n\t    0,     0,  21,  //  92  0001 1001.\n\t124*3, 122*3,   0,  //  93  0000 0010\n\t120*3, 123*3,   0,  //  94  0000 0001\n\t    0,     0,  11,  //  95  0001 1110.\n\t    0,     0,  19,  //  96  0001 1101.\n\t    0,     0,   7,  //  97  0001 1111.\n\t    0,     0,  35,  //  98  0001 1100.\n\t    0,     0,  13,  //  99  0001 1011.\n\t    0,     0,  50,  // 100  0001 0110.\n\t    0,     0,  49,  // 101  0001 1010.\n\t    0,     0,  58,  // 102  0000 0100.\n\t    0,     0,  37,  // 103  0000 1110.\n\t    0,     0,  25,  // 104  0000 1111.\n\t    0,     0,  45,  // 105  0000 1010.\n\t    0,     0,  57,  // 106  0000 1000.\n\t    0,     0,  26,  // 107  0000 1101.\n\t    0,     0,  29,  // 108  0000 1011.\n\t    0,     0,  38,  // 109  0000 1100.\n\t    0,     0,  53,  // 110  0000 1001.\n\t    0,     0,  23,  // 111  0001 0001.\n\t    0,     0,  43,  // 112  0001 0000.\n\t    0,     0,  46,  // 113  0000 0110.\n\t    0,     0,  42,  // 114  0001 0100.\n\t    0,     0,  22,  // 115  0001 0101.\n\t    0,     0,  54,  // 116  0000 0101.\n\t    0,     0,  51,  // 117  0001 0010.\n\t    0,     0,  15,  // 118  0001 0011.\n\t    0,     0,  30,  // 119  0000 0111.\n\t    0,     0,  39,  // 120  0000 0001 0.\n\t    0,     0,  47,  // 121  0000 0011 0.\n\t    0,     0,  55,  // 122  0000 0010 1.\n\t    0,     0,  27,  // 123  0000 0001 1.\n\t    0,     0,  59,  // 124  0000 0010 0.\n\t    0,     0,  31   // 125  0000 0011 1.\n]);\n\nMPEG1.MOTION = new Int16Array([\n\t  1*3,   2*3,   0,  //   0\n\t  4*3,   3*3,   0,  //   1  0\n\t    0,     0,   0,  //   2  1.\n\t  6*3,   5*3,   0,  //   3  01\n\t  8*3,   7*3,   0,  //   4  00\n\t    0,     0,  -1,  //   5  011.\n\t    0,     0,   1,  //   6  010.\n\t  9*3,  10*3,   0,  //   7  001\n\t 12*3,  11*3,   0,  //   8  000\n\t    0,     0,   2,  //   9  0010.\n\t    0,     0,  -2,  //  10  0011.\n\t 14*3,  15*3,   0,  //  11  0001\n\t 16*3,  13*3,   0,  //  12  0000\n\t 20*3,  18*3,   0,  //  13  0000 1\n\t    0,     0,   3,  //  14  0001 0.\n\t    0,     0,  -3,  //  15  0001 1.\n\t 17*3,  19*3,   0,  //  16  0000 0\n\t   -1,  23*3,   0,  //  17  0000 00\n\t 27*3,  25*3,   0,  //  18  0000 11\n\t 26*3,  21*3,   0,  //  19  0000 01\n\t 24*3,  22*3,   0,  //  20  0000 10\n\t 32*3,  28*3,   0,  //  21  0000 011\n\t 29*3,  31*3,   0,  //  22  0000 101\n\t   -1,  33*3,   0,  //  23  0000 001\n\t 36*3,  35*3,   0,  //  24  0000 100\n\t    0,     0,  -4,  //  25  0000 111.\n\t 30*3,  34*3,   0,  //  26  0000 010\n\t    0,     0,   4,  //  27  0000 110.\n\t    0,     0,  -7,  //  28  0000 0111.\n\t    0,     0,   5,  //  29  0000 1010.\n\t 37*3,  41*3,   0,  //  30  0000 0100\n\t    0,     0,  -5,  //  31  0000 1011.\n\t    0,     0,   7,  //  32  0000 0110.\n\t 38*3,  40*3,   0,  //  33  0000 0011\n\t 42*3,  39*3,   0,  //  34  0000 0101\n\t    0,     0,  -6,  //  35  0000 1001.\n\t    0,     0,   6,  //  36  0000 1000.\n\t 51*3,  54*3,   0,  //  37  0000 0100 0\n\t 50*3,  49*3,   0,  //  38  0000 0011 0\n\t 45*3,  46*3,   0,  //  39  0000 0101 1\n\t 52*3,  47*3,   0,  //  40  0000 0011 1\n\t 43*3,  53*3,   0,  //  41  0000 0100 1\n\t 44*3,  48*3,   0,  //  42  0000 0101 0\n\t    0,     0,  10,  //  43  0000 0100 10.\n\t    0,     0,   9,  //  44  0000 0101 00.\n\t    0,     0,   8,  //  45  0000 0101 10.\n\t    0,     0,  -8,  //  46  0000 0101 11.\n\t 57*3,  66*3,   0,  //  47  0000 0011 11\n\t    0,     0,  -9,  //  48  0000 0101 01.\n\t 60*3,  64*3,   0,  //  49  0000 0011 01\n\t 56*3,  61*3,   0,  //  50  0000 0011 00\n\t 55*3,  62*3,   0,  //  51  0000 0100 00\n\t 58*3,  63*3,   0,  //  52  0000 0011 10\n\t    0,     0, -10,  //  53  0000 0100 11.\n\t 59*3,  65*3,   0,  //  54  0000 0100 01\n\t    0,     0,  12,  //  55  0000 0100 000.\n\t    0,     0,  16,  //  56  0000 0011 000.\n\t    0,     0,  13,  //  57  0000 0011 110.\n\t    0,     0,  14,  //  58  0000 0011 100.\n\t    0,     0,  11,  //  59  0000 0100 010.\n\t    0,     0,  15,  //  60  0000 0011 010.\n\t    0,     0, -16,  //  61  0000 0011 001.\n\t    0,     0, -12,  //  62  0000 0100 001.\n\t    0,     0, -14,  //  63  0000 0011 101.\n\t    0,     0, -15,  //  64  0000 0011 011.\n\t    0,     0, -11,  //  65  0000 0100 011.\n\t    0,     0, -13   //  66  0000 0011 111.\n]);\n\nMPEG1.DCT_DC_SIZE_LUMINANCE = new Int8Array([\n\t  2*3,   1*3, 0,  //   0\n\t  6*3,   5*3, 0,  //   1  1\n\t  3*3,   4*3, 0,  //   2  0\n\t    0,     0, 1,  //   3  00.\n\t    0,     0, 2,  //   4  01.\n\t  9*3,   8*3, 0,  //   5  11\n\t  7*3,  10*3, 0,  //   6  10\n\t    0,     0, 0,  //   7  100.\n\t 12*3,  11*3, 0,  //   8  111\n\t    0,     0, 4,  //   9  110.\n\t    0,     0, 3,  //  10  101.\n\t 13*3,  14*3, 0,  //  11  1111\n\t    0,     0, 5,  //  12  1110.\n\t    0,     0, 6,  //  13  1111 0.\n\t 16*3,  15*3, 0,  //  14  1111 1\n\t 17*3,    -1, 0,  //  15  1111 11\n\t    0,     0, 7,  //  16  1111 10.\n\t    0,     0, 8   //  17  1111 110.\n]);\n\nMPEG1.DCT_DC_SIZE_CHROMINANCE = new Int8Array([\n\t  2*3,   1*3, 0,  //   0\n\t  4*3,   3*3, 0,  //   1  1\n\t  6*3,   5*3, 0,  //   2  0\n\t  8*3,   7*3, 0,  //   3  11\n\t    0,     0, 2,  //   4  10.\n\t    0,     0, 1,  //   5  01.\n\t    0,     0, 0,  //   6  00.\n\t 10*3,   9*3, 0,  //   7  111\n\t    0,     0, 3,  //   8  110.\n\t 12*3,  11*3, 0,  //   9  1111\n\t    0,     0, 4,  //  10  1110.\n\t 14*3,  13*3, 0,  //  11  1111 1\n\t    0,     0, 5,  //  12  1111 0.\n\t 16*3,  15*3, 0,  //  13  1111 11\n\t    0,     0, 6,  //  14  1111 10.\n\t 17*3,    -1, 0,  //  15  1111 111\n\t    0,     0, 7,  //  16  1111 110.\n\t    0,     0, 8   //  17  1111 1110.\n]);\n\n//  dct_coeff bitmap:\n//    0xff00  run\n//    0x00ff  level\n\n//  Decoded values are unsigned. Sign bit follows in the stream.\n\n//  Interpretation of the value 0x0001\n//    for dc_coeff_first:  run=0, level=1\n//    for dc_coeff_next:   If the next bit is 1: run=0, level=1\n//                         If the next bit is 0: end_of_block\n\n//  escape decodes as 0xffff.\n\nMPEG1.DCT_COEFF = new Int32Array([\n\t  1*3,   2*3,      0,  //   0\n\t  4*3,   3*3,      0,  //   1  0\n\t    0,     0, 0x0001,  //   2  1.\n\t  7*3,   8*3,      0,  //   3  01\n\t  6*3,   5*3,      0,  //   4  00\n\t 13*3,   9*3,      0,  //   5  001\n\t 11*3,  10*3,      0,  //   6  000\n\t 14*3,  12*3,      0,  //   7  010\n\t    0,     0, 0x0101,  //   8  011.\n\t 20*3,  22*3,      0,  //   9  0011\n\t 18*3,  21*3,      0,  //  10  0001\n\t 16*3,  19*3,      0,  //  11  0000\n\t    0,     0, 0x0201,  //  12  0101.\n\t 17*3,  15*3,      0,  //  13  0010\n\t    0,     0, 0x0002,  //  14  0100.\n\t    0,     0, 0x0003,  //  15  0010 1.\n\t 27*3,  25*3,      0,  //  16  0000 0\n\t 29*3,  31*3,      0,  //  17  0010 0\n\t 24*3,  26*3,      0,  //  18  0001 0\n\t 32*3,  30*3,      0,  //  19  0000 1\n\t    0,     0, 0x0401,  //  20  0011 0.\n\t 23*3,  28*3,      0,  //  21  0001 1\n\t    0,     0, 0x0301,  //  22  0011 1.\n\t    0,     0, 0x0102,  //  23  0001 10.\n\t    0,     0, 0x0701,  //  24  0001 00.\n\t    0,     0, 0xffff,  //  25  0000 01. -- escape\n\t    0,     0, 0x0601,  //  26  0001 01.\n\t 37*3,  36*3,      0,  //  27  0000 00\n\t    0,     0, 0x0501,  //  28  0001 11.\n\t 35*3,  34*3,      0,  //  29  0010 00\n\t 39*3,  38*3,      0,  //  30  0000 11\n\t 33*3,  42*3,      0,  //  31  0010 01\n\t 40*3,  41*3,      0,  //  32  0000 10\n\t 52*3,  50*3,      0,  //  33  0010 010\n\t 54*3,  53*3,      0,  //  34  0010 001\n\t 48*3,  49*3,      0,  //  35  0010 000\n\t 43*3,  45*3,      0,  //  36  0000 001\n\t 46*3,  44*3,      0,  //  37  0000 000\n\t    0,     0, 0x0801,  //  38  0000 111.\n\t    0,     0, 0x0004,  //  39  0000 110.\n\t    0,     0, 0x0202,  //  40  0000 100.\n\t    0,     0, 0x0901,  //  41  0000 101.\n\t 51*3,  47*3,      0,  //  42  0010 011\n\t 55*3,  57*3,      0,  //  43  0000 0010\n\t 60*3,  56*3,      0,  //  44  0000 0001\n\t 59*3,  58*3,      0,  //  45  0000 0011\n\t 61*3,  62*3,      0,  //  46  0000 0000\n\t    0,     0, 0x0a01,  //  47  0010 0111.\n\t    0,     0, 0x0d01,  //  48  0010 0000.\n\t    0,     0, 0x0006,  //  49  0010 0001.\n\t    0,     0, 0x0103,  //  50  0010 0101.\n\t    0,     0, 0x0005,  //  51  0010 0110.\n\t    0,     0, 0x0302,  //  52  0010 0100.\n\t    0,     0, 0x0b01,  //  53  0010 0011.\n\t    0,     0, 0x0c01,  //  54  0010 0010.\n\t 76*3,  75*3,      0,  //  55  0000 0010 0\n\t 67*3,  70*3,      0,  //  56  0000 0001 1\n\t 73*3,  71*3,      0,  //  57  0000 0010 1\n\t 78*3,  74*3,      0,  //  58  0000 0011 1\n\t 72*3,  77*3,      0,  //  59  0000 0011 0\n\t 69*3,  64*3,      0,  //  60  0000 0001 0\n\t 68*3,  63*3,      0,  //  61  0000 0000 0\n\t 66*3,  65*3,      0,  //  62  0000 0000 1\n\t 81*3,  87*3,      0,  //  63  0000 0000 01\n\t 91*3,  80*3,      0,  //  64  0000 0001 01\n\t 82*3,  79*3,      0,  //  65  0000 0000 11\n\t 83*3,  86*3,      0,  //  66  0000 0000 10\n\t 93*3,  92*3,      0,  //  67  0000 0001 10\n\t 84*3,  85*3,      0,  //  68  0000 0000 00\n\t 90*3,  94*3,      0,  //  69  0000 0001 00\n\t 88*3,  89*3,      0,  //  70  0000 0001 11\n\t    0,     0, 0x0203,  //  71  0000 0010 11.\n\t    0,     0, 0x0104,  //  72  0000 0011 00.\n\t    0,     0, 0x0007,  //  73  0000 0010 10.\n\t    0,     0, 0x0402,  //  74  0000 0011 11.\n\t    0,     0, 0x0502,  //  75  0000 0010 01.\n\t    0,     0, 0x1001,  //  76  0000 0010 00.\n\t    0,     0, 0x0f01,  //  77  0000 0011 01.\n\t    0,     0, 0x0e01,  //  78  0000 0011 10.\n\t105*3, 107*3,      0,  //  79  0000 0000 111\n\t111*3, 114*3,      0,  //  80  0000 0001 011\n\t104*3,  97*3,      0,  //  81  0000 0000 010\n\t125*3, 119*3,      0,  //  82  0000 0000 110\n\t 96*3,  98*3,      0,  //  83  0000 0000 100\n\t   -1, 123*3,      0,  //  84  0000 0000 000\n\t 95*3, 101*3,      0,  //  85  0000 0000 001\n\t106*3, 121*3,      0,  //  86  0000 0000 101\n\t 99*3, 102*3,      0,  //  87  0000 0000 011\n\t113*3, 103*3,      0,  //  88  0000 0001 110\n\t112*3, 116*3,      0,  //  89  0000 0001 111\n\t110*3, 100*3,      0,  //  90  0000 0001 000\n\t124*3, 115*3,      0,  //  91  0000 0001 010\n\t117*3, 122*3,      0,  //  92  0000 0001 101\n\t109*3, 118*3,      0,  //  93  0000 0001 100\n\t120*3, 108*3,      0,  //  94  0000 0001 001\n\t127*3, 136*3,      0,  //  95  0000 0000 0010\n\t139*3, 140*3,      0,  //  96  0000 0000 1000\n\t130*3, 126*3,      0,  //  97  0000 0000 0101\n\t145*3, 146*3,      0,  //  98  0000 0000 1001\n\t128*3, 129*3,      0,  //  99  0000 0000 0110\n\t    0,     0, 0x0802,  // 100  0000 0001 0001.\n\t132*3, 134*3,      0,  // 101  0000 0000 0011\n\t155*3, 154*3,      0,  // 102  0000 0000 0111\n\t    0,     0, 0x0008,  // 103  0000 0001 1101.\n\t137*3, 133*3,      0,  // 104  0000 0000 0100\n\t143*3, 144*3,      0,  // 105  0000 0000 1110\n\t151*3, 138*3,      0,  // 106  0000 0000 1010\n\t142*3, 141*3,      0,  // 107  0000 0000 1111\n\t    0,     0, 0x000a,  // 108  0000 0001 0011.\n\t    0,     0, 0x0009,  // 109  0000 0001 1000.\n\t    0,     0, 0x000b,  // 110  0000 0001 0000.\n\t    0,     0, 0x1501,  // 111  0000 0001 0110.\n\t    0,     0, 0x0602,  // 112  0000 0001 1110.\n\t    0,     0, 0x0303,  // 113  0000 0001 1100.\n\t    0,     0, 0x1401,  // 114  0000 0001 0111.\n\t    0,     0, 0x0702,  // 115  0000 0001 0101.\n\t    0,     0, 0x1101,  // 116  0000 0001 1111.\n\t    0,     0, 0x1201,  // 117  0000 0001 1010.\n\t    0,     0, 0x1301,  // 118  0000 0001 1001.\n\t148*3, 152*3,      0,  // 119  0000 0000 1101\n\t    0,     0, 0x0403,  // 120  0000 0001 0010.\n\t153*3, 150*3,      0,  // 121  0000 0000 1011\n\t    0,     0, 0x0105,  // 122  0000 0001 1011.\n\t131*3, 135*3,      0,  // 123  0000 0000 0001\n\t    0,     0, 0x0204,  // 124  0000 0001 0100.\n\t149*3, 147*3,      0,  // 125  0000 0000 1100\n\t172*3, 173*3,      0,  // 126  0000 0000 0101 1\n\t162*3, 158*3,      0,  // 127  0000 0000 0010 0\n\t170*3, 161*3,      0,  // 128  0000 0000 0110 0\n\t168*3, 166*3,      0,  // 129  0000 0000 0110 1\n\t157*3, 179*3,      0,  // 130  0000 0000 0101 0\n\t169*3, 167*3,      0,  // 131  0000 0000 0001 0\n\t174*3, 171*3,      0,  // 132  0000 0000 0011 0\n\t178*3, 177*3,      0,  // 133  0000 0000 0100 1\n\t156*3, 159*3,      0,  // 134  0000 0000 0011 1\n\t164*3, 165*3,      0,  // 135  0000 0000 0001 1\n\t183*3, 182*3,      0,  // 136  0000 0000 0010 1\n\t175*3, 176*3,      0,  // 137  0000 0000 0100 0\n\t    0,     0, 0x0107,  // 138  0000 0000 1010 1.\n\t    0,     0, 0x0a02,  // 139  0000 0000 1000 0.\n\t    0,     0, 0x0902,  // 140  0000 0000 1000 1.\n\t    0,     0, 0x1601,  // 141  0000 0000 1111 1.\n\t    0,     0, 0x1701,  // 142  0000 0000 1111 0.\n\t    0,     0, 0x1901,  // 143  0000 0000 1110 0.\n\t    0,     0, 0x1801,  // 144  0000 0000 1110 1.\n\t    0,     0, 0x0503,  // 145  0000 0000 1001 0.\n\t    0,     0, 0x0304,  // 146  0000 0000 1001 1.\n\t    0,     0, 0x000d,  // 147  0000 0000 1100 1.\n\t    0,     0, 0x000c,  // 148  0000 0000 1101 0.\n\t    0,     0, 0x000e,  // 149  0000 0000 1100 0.\n\t    0,     0, 0x000f,  // 150  0000 0000 1011 1.\n\t    0,     0, 0x0205,  // 151  0000 0000 1010 0.\n\t    0,     0, 0x1a01,  // 152  0000 0000 1101 1.\n\t    0,     0, 0x0106,  // 153  0000 0000 1011 0.\n\t180*3, 181*3,      0,  // 154  0000 0000 0111 1\n\t160*3, 163*3,      0,  // 155  0000 0000 0111 0\n\t196*3, 199*3,      0,  // 156  0000 0000 0011 10\n\t    0,     0, 0x001b,  // 157  0000 0000 0101 00.\n\t203*3, 185*3,      0,  // 158  0000 0000 0010 01\n\t202*3, 201*3,      0,  // 159  0000 0000 0011 11\n\t    0,     0, 0x0013,  // 160  0000 0000 0111 00.\n\t    0,     0, 0x0016,  // 161  0000 0000 0110 01.\n\t197*3, 207*3,      0,  // 162  0000 0000 0010 00\n\t    0,     0, 0x0012,  // 163  0000 0000 0111 01.\n\t191*3, 192*3,      0,  // 164  0000 0000 0001 10\n\t188*3, 190*3,      0,  // 165  0000 0000 0001 11\n\t    0,     0, 0x0014,  // 166  0000 0000 0110 11.\n\t184*3, 194*3,      0,  // 167  0000 0000 0001 01\n\t    0,     0, 0x0015,  // 168  0000 0000 0110 10.\n\t186*3, 193*3,      0,  // 169  0000 0000 0001 00\n\t    0,     0, 0x0017,  // 170  0000 0000 0110 00.\n\t204*3, 198*3,      0,  // 171  0000 0000 0011 01\n\t    0,     0, 0x0019,  // 172  0000 0000 0101 10.\n\t    0,     0, 0x0018,  // 173  0000 0000 0101 11.\n\t200*3, 205*3,      0,  // 174  0000 0000 0011 00\n\t    0,     0, 0x001f,  // 175  0000 0000 0100 00.\n\t    0,     0, 0x001e,  // 176  0000 0000 0100 01.\n\t    0,     0, 0x001c,  // 177  0000 0000 0100 11.\n\t    0,     0, 0x001d,  // 178  0000 0000 0100 10.\n\t    0,     0, 0x001a,  // 179  0000 0000 0101 01.\n\t    0,     0, 0x0011,  // 180  0000 0000 0111 10.\n\t    0,     0, 0x0010,  // 181  0000 0000 0111 11.\n\t189*3, 206*3,      0,  // 182  0000 0000 0010 11\n\t187*3, 195*3,      0,  // 183  0000 0000 0010 10\n\t218*3, 211*3,      0,  // 184  0000 0000 0001 010\n\t    0,     0, 0x0025,  // 185  0000 0000 0010 011.\n\t215*3, 216*3,      0,  // 186  0000 0000 0001 000\n\t    0,     0, 0x0024,  // 187  0000 0000 0010 100.\n\t210*3, 212*3,      0,  // 188  0000 0000 0001 110\n\t    0,     0, 0x0022,  // 189  0000 0000 0010 110.\n\t213*3, 209*3,      0,  // 190  0000 0000 0001 111\n\t221*3, 222*3,      0,  // 191  0000 0000 0001 100\n\t219*3, 208*3,      0,  // 192  0000 0000 0001 101\n\t217*3, 214*3,      0,  // 193  0000 0000 0001 001\n\t223*3, 220*3,      0,  // 194  0000 0000 0001 011\n\t    0,     0, 0x0023,  // 195  0000 0000 0010 101.\n\t    0,     0, 0x010b,  // 196  0000 0000 0011 100.\n\t    0,     0, 0x0028,  // 197  0000 0000 0010 000.\n\t    0,     0, 0x010c,  // 198  0000 0000 0011 011.\n\t    0,     0, 0x010a,  // 199  0000 0000 0011 101.\n\t    0,     0, 0x0020,  // 200  0000 0000 0011 000.\n\t    0,     0, 0x0108,  // 201  0000 0000 0011 111.\n\t    0,     0, 0x0109,  // 202  0000 0000 0011 110.\n\t    0,     0, 0x0026,  // 203  0000 0000 0010 010.\n\t    0,     0, 0x010d,  // 204  0000 0000 0011 010.\n\t    0,     0, 0x010e,  // 205  0000 0000 0011 001.\n\t    0,     0, 0x0021,  // 206  0000 0000 0010 111.\n\t    0,     0, 0x0027,  // 207  0000 0000 0010 001.\n\t    0,     0, 0x1f01,  // 208  0000 0000 0001 1011.\n\t    0,     0, 0x1b01,  // 209  0000 0000 0001 1111.\n\t    0,     0, 0x1e01,  // 210  0000 0000 0001 1100.\n\t    0,     0, 0x1002,  // 211  0000 0000 0001 0101.\n\t    0,     0, 0x1d01,  // 212  0000 0000 0001 1101.\n\t    0,     0, 0x1c01,  // 213  0000 0000 0001 1110.\n\t    0,     0, 0x010f,  // 214  0000 0000 0001 0011.\n\t    0,     0, 0x0112,  // 215  0000 0000 0001 0000.\n\t    0,     0, 0x0111,  // 216  0000 0000 0001 0001.\n\t    0,     0, 0x0110,  // 217  0000 0000 0001 0010.\n\t    0,     0, 0x0603,  // 218  0000 0000 0001 0100.\n\t    0,     0, 0x0b02,  // 219  0000 0000 0001 1010.\n\t    0,     0, 0x0e02,  // 220  0000 0000 0001 0111.\n\t    0,     0, 0x0d02,  // 221  0000 0000 0001 1000.\n\t    0,     0, 0x0c02,  // 222  0000 0000 0001 1001.\n\t    0,     0, 0x0f02   // 223  0000 0000 0001 0110.\n]);\n\nMPEG1.PICTURE_TYPE = {\n\tINTRA: 1,\n\tPREDICTIVE: 2,\n\tB: 3\n};\n\nMPEG1.START = {\n\tSEQUENCE: 0xB3,\n\tSLICE_FIRST: 0x01,\n\tSLICE_LAST: 0xAF,\n\tPICTURE: 0x00,\n\tEXTENSION: 0xB5,\n\tUSER_DATA: 0xB2\n};\n\nreturn MPEG1;\n\n})();\n\n","JSMpeg.Decoder.MP2Audio = (function(){ \"use strict\";\n\n// Based on kjmp2 by Martin J. Fiedler\n// http://keyj.emphy.de/kjmp2/\n\nvar MP2 = function(options) {\n\tJSMpeg.Decoder.Base.call(this, options);\n\n\tvar bufferSize = options.audioBufferSize || 128*1024;\n\tvar bufferMode = options.streaming\n\t\t? JSMpeg.BitBuffer.MODE.EVICT\n\t\t: JSMpeg.BitBuffer.MODE.EXPAND;\n\n\tthis.bits = new JSMpeg.BitBuffer(bufferSize, bufferMode);\n\n\tthis.left = new Float32Array(1152);\n\tthis.right = new Float32Array(1152);\n\tthis.sampleRate = 44100;\n\t\n\tthis.D = new Float32Array(1024);\n\tthis.D.set(MP2.SYNTHESIS_WINDOW, 0);\n\tthis.D.set(MP2.SYNTHESIS_WINDOW, 512);\n\tthis.V = new Float32Array(1024);\n\tthis.U = new Int32Array(32);\n\tthis.VPos = 0;\n\n\tthis.allocation = [new Array(32), new Array(32)];\n\tthis.scaleFactorInfo = [new Uint8Array(32), new Uint8Array(32)];\n\tthis.scaleFactor = [new Array(32), new Array(32)];\n\tthis.sample = [new Array(32), new Array(32)];\n\t\n\tfor (var j = 0; j < 2; j++) {\n\t\tfor (var i = 0; i < 32; i++) {\n\t\t\tthis.scaleFactor[j][i] = [0, 0, 0];\n\t\t\tthis.sample[j][i] = [0, 0, 0];\n\t\t}\n\t}\n};\n\nMP2.prototype = Object.create(JSMpeg.Decoder.Base.prototype);\nMP2.prototype.constructor = MP2;\n\nMP2.prototype.decode = function() {\n\tvar pos = this.bits.index >> 3;\n\tif (pos >= this.bits.byteLength) {\n\t\treturn false;\n\t}\n\n\tvar decoded = this.decodeFrame(this.left, this.right);\n\tthis.bits.index = (pos + decoded) << 3;\n\n\tif (!decoded) {\n\t\treturn false;\n\t}\n\n\tif (this.destination) {\n\t\tthis.destination.play(this.sampleRate, this.left, this.right);\n\t}\n\n\tthis.advanceDecodedTime(this.left.length / this.sampleRate);\n\treturn true;\n};\n\nMP2.prototype.getCurrentTime = function() {\n\tvar enqueuedTime = this.destination ? this.destination.enqueuedTime : 0;\n\treturn this.decodedTime - enqueuedTime;\n};\n\nMP2.prototype.decodeFrame = function(left, right) {\n\t// Check for valid header: syncword OK, MPEG-Audio Layer 2\n\tvar sync = this.bits.read(11),\n\t\tversion = this.bits.read(2),\n\t\tlayer = this.bits.read(2),\n\t\thasCRC = !this.bits.read(1);\n\n\tif (\n\t\tsync !== MP2.FRAME_SYNC ||\n\t\tversion !== MP2.VERSION.MPEG_1 ||\n\t\tlayer !== MP2.LAYER.II\n\t) {\n\t\treturn 0; // Invalid header or unsupported version\n\t}\n\n\tvar bitrateIndex = this.bits.read(4) - 1;\n\tif (bitrateIndex > 13) {\n\t\treturn 0;  // Invalid bit rate or 'free format'\n\t}\n\n\tvar sampleRateIndex = this.bits.read(2);\n\tvar sampleRate = MP2.SAMPLE_RATE[sampleRateIndex];\n\tif (sampleRateIndex === 3) {\n\t\treturn 0; // Invalid sample rate\n\t}\n\tif (version === MP2.VERSION.MPEG_2) {\n\t\tsampleRateIndex += 4;\n\t\tbitrateIndex += 14;\n\t}\n\tvar padding = this.bits.read(1),\n\t\tprivat = this.bits.read(1),\n\t\tmode = this.bits.read(2);\n\n\t// Parse the mode_extension, set up the stereo bound\n\tvar bound = 0;\n\tif (mode === MP2.MODE.JOINT_STEREO) {\n\t\tbound = (this.bits.read(2) + 1) << 2;\n\t}\n\telse {\n\t\tthis.bits.skip(2);\n\t\tbound = (mode === MP2.MODE.MONO) ? 0 : 32;\n\t}\n\n\t// Discard the last 4 bits of the header and the CRC value, if present\n\tthis.bits.skip(4);\n\tif (hasCRC) {\n\t\tthis.bits.skip(16);\n\t}\n\n\t// Compute the frame size\n\tvar bitrate = MP2.BIT_RATE[bitrateIndex],\n\t\tsampleRate = MP2.SAMPLE_RATE[sampleRateIndex],\n\t\tframeSize = ((144000 * bitrate / sampleRate) + padding)|0;\n\t\n\n\t// Prepare the quantizer table lookups\n\tvar tab3 = 0;\n\tvar sblimit = 0;\n\tif (version === MP2.VERSION.MPEG_2) {\n\t\t// MPEG-2 (LSR)\n\t\ttab3 = 2;\n\t\tsblimit = 30;\n\t}\n\telse {\n\t\t// MPEG-1\n\t\tvar tab1 = (mode === MP2.MODE.MONO) ? 0 : 1;\n\t\tvar tab2 = MP2.QUANT_LUT_STEP_1[tab1][bitrateIndex];\n\t\ttab3 = MP2.QUANT_LUT_STEP_2[tab2][sampleRateIndex];\n\t\tsblimit = tab3 & 63;\n\t\ttab3 >>= 6;\n\t}\n\n\tif (bound > sblimit) {\n\t\tbound = sblimit;\n\t}\n\n\t// Read the allocation information\n\tfor (var sb = 0; sb < bound; sb++) {\n\t\tthis.allocation[0][sb] = this.readAllocation(sb, tab3);\n\t\tthis.allocation[1][sb] = this.readAllocation(sb, tab3);\n\t}\n\n\tfor (var sb = bound; sb < sblimit; sb++) {\n\t\tthis.allocation[0][sb] = \n\t\t\tthis.allocation[1][sb] =\n\t\t\tthis.readAllocation(sb, tab3);\n\t}\n\n\t// Read scale factor selector information\n\tvar channels = (mode === MP2.MODE.MONO) ? 1 : 2;\n\tfor (var sb = 0;  sb < sblimit; sb++) {\n\t\tfor (ch = 0;  ch < channels; ch++) {\n\t\t\tif (this.allocation[ch][sb]) {\n\t\t\t\tthis.scaleFactorInfo[ch][sb] = this.bits.read(2);\n\t\t\t}\n\t\t}\n\t\tif (mode === MP2.MODE.MONO) {\n\t\t\tthis.scaleFactorInfo[1][sb] = this.scaleFactorInfo[0][sb];\n\t\t}\n\t}\n\n\t// Read scale factors\n\tfor (var sb = 0;  sb < sblimit; sb++) {\n\t\tfor (var ch = 0;  ch < channels; ch++) {\n\t\t\tif (this.allocation[ch][sb]) {\n\t\t\t\tvar sf = this.scaleFactor[ch][sb];\n\t\t\t\tswitch (this.scaleFactorInfo[ch][sb]) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tsf[0] = this.bits.read(6);\n\t\t\t\t\t\tsf[1] = this.bits.read(6);\n\t\t\t\t\t\tsf[2] = this.bits.read(6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tsf[0] =\n\t\t\t\t\t\tsf[1] = this.bits.read(6);\n\t\t\t\t\t\tsf[2] = this.bits.read(6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tsf[0] =\n\t\t\t\t\t\tsf[1] =\n\t\t\t\t\t\tsf[2] = this.bits.read(6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tsf[0] = this.bits.read(6);\n\t\t\t\t\t\tsf[1] =\n\t\t\t\t\t\tsf[2] = this.bits.read(6);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (mode === MP2.MODE.MONO) {\n\t\t\tthis.scaleFactor[1][sb][0] = this.scaleFactor[0][sb][0];\n\t\t\tthis.scaleFactor[1][sb][1] = this.scaleFactor[0][sb][1];\n\t\t\tthis.scaleFactor[1][sb][2] = this.scaleFactor[0][sb][2];\n\t\t}\n\t}\n\n\t// Coefficient input and reconstruction\n\tvar outPos = 0;\n\tfor (var part = 0; part < 3; part++) {\n\t\tfor (var granule = 0; granule < 4; granule++) {\n\n\t\t\t// Read the samples\n\t\t\tfor (var sb = 0; sb < bound; sb++) {\n\t\t\t\tthis.readSamples(0, sb, part);\n\t\t\t\tthis.readSamples(1, sb, part);\n\t\t\t}\n\t\t\tfor (var sb = bound; sb < sblimit; sb++) {\n\t\t\t\tthis.readSamples(0, sb, part);\n\t\t\t\tthis.sample[1][sb][0] = this.sample[0][sb][0];\n\t\t\t\tthis.sample[1][sb][1] = this.sample[0][sb][1];\n\t\t\t\tthis.sample[1][sb][2] = this.sample[0][sb][2];\n\t\t\t}\n\t\t\tfor (var sb = sblimit; sb < 32; sb++) {\n\t\t\t\tthis.sample[0][sb][0] = 0;\n\t\t\t\tthis.sample[0][sb][1] = 0;\n\t\t\t\tthis.sample[0][sb][2] = 0;\n\t\t\t\tthis.sample[1][sb][0] = 0;\n\t\t\t\tthis.sample[1][sb][1] = 0;\n\t\t\t\tthis.sample[1][sb][2] = 0;\n\t\t\t}\n\n\t\t\t// Synthesis loop\n\t\t\tfor (var p = 0; p < 3; p++) {\n\t\t\t\t// Shifting step\n\t\t\t\tthis.VPos = (this.VPos - 64) & 1023;\n\n\t\t\t\tfor (var ch = 0;  ch < 2; ch++) {\n\t\t\t\t\tMP2.MatrixTransform(this.sample[ch], p, this.V, this.VPos);\n\n\t\t\t\t\t// Build U, windowing, calculate output\n\t\t\t\t\tJSMpeg.Fill(this.U, 0);\n\n\t\t\t\t\tvar dIndex = 512 - (this.VPos >> 1);\n\t\t\t\t\tvar vIndex = (this.VPos % 128) >> 1;\n\t\t\t\t\twhile (vIndex < 1024) {\n\t\t\t\t\t\tfor (var i = 0; i < 32; ++i) {\n\t\t\t\t\t\t\tthis.U[i] += this.D[dIndex++] * this.V[vIndex++];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvIndex += 128-32;\n\t\t\t\t\t\tdIndex += 64-32;\n\t\t\t\t\t}\n\n\t\t\t\t\tvIndex = (128-32 + 1024) - vIndex;\n\t\t\t\t\tdIndex -= (512 - 32);\n\t\t\t\t\twhile (vIndex < 1024) {\n\t\t\t\t\t\tfor (var i = 0; i < 32; ++i) {\n\t\t\t\t\t\t\tthis.U[i] += this.D[dIndex++] * this.V[vIndex++];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvIndex += 128-32;\n\t\t\t\t\t\tdIndex += 64-32;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Output samples\n\t\t\t\t\tvar outChannel = ch === 0 ? left : right;\n\t\t\t\t\tfor (var j = 0; j < 32; j++) {\n\t\t\t\t\t\toutChannel[outPos + j] = this.U[j] / 2147418112;\n\t\t\t\t\t}\n\t\t\t\t} // End of synthesis channel loop\n\t\t\t\toutPos += 32;\n\t\t\t} // End of synthesis sub-block loop\n\n\t\t} // Decoding of the granule finished\n\t}\n\n\tthis.sampleRate = sampleRate;\n\treturn frameSize;\n};\n\nMP2.prototype.readAllocation = function(sb, tab3) {\n\tvar tab4 = MP2.QUANT_LUT_STEP_3[tab3][sb];\n\tvar qtab = MP2.QUANT_LUT_STEP4[tab4 & 15][this.bits.read(tab4 >> 4)];\n\treturn qtab ? (MP2.QUANT_TAB[qtab - 1]) : 0;\n};\n\nMP2.prototype.readSamples = function(ch, sb, part) {\n\tvar q = this.allocation[ch][sb],\n\t\tsf = this.scaleFactor[ch][sb][part],\n\t\tsample = this.sample[ch][sb],\n\t\tval = 0;\n\n\tif (!q) {\n\t\t// No bits allocated for this subband\n\t\tsample[0] = sample[1] = sample[2] = 0;\n\t\treturn;\n\t}\n\n\t// Resolve scalefactor\n\tif (sf === 63) {\n\t\tsf = 0;\n\t}\n\telse {\n\t\tvar shift = (sf / 3)|0;\n\t\tsf = (MP2.SCALEFACTOR_BASE[sf % 3] + ((1 << shift) >> 1)) >> shift;\n\t}\n\n\t// Decode samples\n\tvar adj = q.levels;\n\tif (q.group) {\n\t\t// Decode grouped samples\n\t\tval = this.bits.read(q.bits);\n\t\tsample[0] = val % adj;\n\t\tval = (val / adj)|0;\n\t\tsample[1] = val % adj;\n\t\tsample[2] = (val / adj)|0;\n\t}\n\telse {\n\t\t// Decode direct samples\n\t\tsample[0] = this.bits.read(q.bits);\n\t\tsample[1] = this.bits.read(q.bits);\n\t\tsample[2] = this.bits.read(q.bits);\n\t}\n\n\t// Postmultiply samples\n\tvar scale = (65536 / (adj + 1))|0;\n\tadj = ((adj + 1) >> 1) - 1;\n\n\tval = (adj - sample[0]) * scale;\n\tsample[0] = (val * (sf >> 12) + ((val * (sf & 4095) + 2048) >> 12)) >> 12;\n\n\tval = (adj - sample[1]) * scale;\n\tsample[1] = (val * (sf >> 12) + ((val * (sf & 4095) + 2048) >> 12)) >> 12;\n\n\tval = (adj - sample[2]) * scale;\n\tsample[2] = (val * (sf >> 12) + ((val * (sf & 4095) + 2048) >> 12)) >> 12;\n};\n\nMP2.MatrixTransform = function(s, ss, d, dp) {\n\tvar t01, t02, t03, t04, t05, t06, t07, t08, t09, t10, t11, t12,\n\t\tt13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24,\n\t\tt25, t26, t27, t28, t29, t30, t31, t32, t33;\n\n\tt01 = s[ 0][ss] + s[31][ss]; t02 = (s[ 0][ss] - s[31][ss]) * 0.500602998235;\n\tt03 = s[ 1][ss] + s[30][ss]; t04 = (s[ 1][ss] - s[30][ss]) * 0.505470959898;\n\tt05 = s[ 2][ss] + s[29][ss]; t06 = (s[ 2][ss] - s[29][ss]) * 0.515447309923;\n\tt07 = s[ 3][ss] + s[28][ss]; t08 = (s[ 3][ss] - s[28][ss]) * 0.53104259109;\n\tt09 = s[ 4][ss] + s[27][ss]; t10 = (s[ 4][ss] - s[27][ss]) * 0.553103896034;\n\tt11 = s[ 5][ss] + s[26][ss]; t12 = (s[ 5][ss] - s[26][ss]) * 0.582934968206;\n\tt13 = s[ 6][ss] + s[25][ss]; t14 = (s[ 6][ss] - s[25][ss]) * 0.622504123036;\n\tt15 = s[ 7][ss] + s[24][ss]; t16 = (s[ 7][ss] - s[24][ss]) * 0.674808341455;\n\tt17 = s[ 8][ss] + s[23][ss]; t18 = (s[ 8][ss] - s[23][ss]) * 0.744536271002;\n\tt19 = s[ 9][ss] + s[22][ss]; t20 = (s[ 9][ss] - s[22][ss]) * 0.839349645416;\n\tt21 = s[10][ss] + s[21][ss]; t22 = (s[10][ss] - s[21][ss]) * 0.972568237862;\n\tt23 = s[11][ss] + s[20][ss]; t24 = (s[11][ss] - s[20][ss]) * 1.16943993343;\n\tt25 = s[12][ss] + s[19][ss]; t26 = (s[12][ss] - s[19][ss]) * 1.48416461631;\n\tt27 = s[13][ss] + s[18][ss]; t28 = (s[13][ss] - s[18][ss]) * 2.05778100995;\n\tt29 = s[14][ss] + s[17][ss]; t30 = (s[14][ss] - s[17][ss]) * 3.40760841847;\n\tt31 = s[15][ss] + s[16][ss]; t32 = (s[15][ss] - s[16][ss]) * 10.1900081235;\n\n\tt33 = t01 + t31; t31 = (t01 - t31) * 0.502419286188;\n\tt01 = t03 + t29; t29 = (t03 - t29) * 0.52249861494;\n\tt03 = t05 + t27; t27 = (t05 - t27) * 0.566944034816;\n\tt05 = t07 + t25; t25 = (t07 - t25) * 0.64682178336;\n\tt07 = t09 + t23; t23 = (t09 - t23) * 0.788154623451;\n\tt09 = t11 + t21; t21 = (t11 - t21) * 1.06067768599;\n\tt11 = t13 + t19; t19 = (t13 - t19) * 1.72244709824;\n\tt13 = t15 + t17; t17 = (t15 - t17) * 5.10114861869;\n\tt15 = t33 + t13; t13 = (t33 - t13) * 0.509795579104;\n\tt33 = t01 + t11; t01 = (t01 - t11) * 0.601344886935;\n\tt11 = t03 + t09; t09 = (t03 - t09) * 0.899976223136;\n\tt03 = t05 + t07; t07 = (t05 - t07) * 2.56291544774;\n\tt05 = t15 + t03; t15 = (t15 - t03) * 0.541196100146;\n\tt03 = t33 + t11; t11 = (t33 - t11) * 1.30656296488;\n\tt33 = t05 + t03; t05 = (t05 - t03) * 0.707106781187;\n\tt03 = t15 + t11; t15 = (t15 - t11) * 0.707106781187;\n\tt03 += t15;\n\tt11 = t13 + t07; t13 = (t13 - t07) * 0.541196100146;\n\tt07 = t01 + t09; t09 = (t01 - t09) * 1.30656296488;\n\tt01 = t11 + t07; t07 = (t11 - t07) * 0.707106781187;\n\tt11 = t13 + t09; t13 = (t13 - t09) * 0.707106781187;\n\tt11 += t13; t01 += t11; \n\tt11 += t07; t07 += t13;\n\tt09 = t31 + t17; t31 = (t31 - t17) * 0.509795579104;\n\tt17 = t29 + t19; t29 = (t29 - t19) * 0.601344886935;\n\tt19 = t27 + t21; t21 = (t27 - t21) * 0.899976223136;\n\tt27 = t25 + t23; t23 = (t25 - t23) * 2.56291544774;\n\tt25 = t09 + t27; t09 = (t09 - t27) * 0.541196100146;\n\tt27 = t17 + t19; t19 = (t17 - t19) * 1.30656296488;\n\tt17 = t25 + t27; t27 = (t25 - t27) * 0.707106781187;\n\tt25 = t09 + t19; t19 = (t09 - t19) * 0.707106781187;\n\tt25 += t19;\n\tt09 = t31 + t23; t31 = (t31 - t23) * 0.541196100146;\n\tt23 = t29 + t21; t21 = (t29 - t21) * 1.30656296488;\n\tt29 = t09 + t23; t23 = (t09 - t23) * 0.707106781187;\n\tt09 = t31 + t21; t31 = (t31 - t21) * 0.707106781187;\n\tt09 += t31;\tt29 += t09;\tt09 += t23;\tt23 += t31;\n\tt17 += t29;\tt29 += t25;\tt25 += t09;\tt09 += t27;\n\tt27 += t23;\tt23 += t19; t19 += t31;\t\n\tt21 = t02 + t32; t02 = (t02 - t32) * 0.502419286188;\n\tt32 = t04 + t30; t04 = (t04 - t30) * 0.52249861494;\n\tt30 = t06 + t28; t28 = (t06 - t28) * 0.566944034816;\n\tt06 = t08 + t26; t08 = (t08 - t26) * 0.64682178336;\n\tt26 = t10 + t24; t10 = (t10 - t24) * 0.788154623451;\n\tt24 = t12 + t22; t22 = (t12 - t22) * 1.06067768599;\n\tt12 = t14 + t20; t20 = (t14 - t20) * 1.72244709824;\n\tt14 = t16 + t18; t16 = (t16 - t18) * 5.10114861869;\n\tt18 = t21 + t14; t14 = (t21 - t14) * 0.509795579104;\n\tt21 = t32 + t12; t32 = (t32 - t12) * 0.601344886935;\n\tt12 = t30 + t24; t24 = (t30 - t24) * 0.899976223136;\n\tt30 = t06 + t26; t26 = (t06 - t26) * 2.56291544774;\n\tt06 = t18 + t30; t18 = (t18 - t30) * 0.541196100146;\n\tt30 = t21 + t12; t12 = (t21 - t12) * 1.30656296488;\n\tt21 = t06 + t30; t30 = (t06 - t30) * 0.707106781187;\n\tt06 = t18 + t12; t12 = (t18 - t12) * 0.707106781187;\n\tt06 += t12;\n\tt18 = t14 + t26; t26 = (t14 - t26) * 0.541196100146;\n\tt14 = t32 + t24; t24 = (t32 - t24) * 1.30656296488;\n\tt32 = t18 + t14; t14 = (t18 - t14) * 0.707106781187;\n\tt18 = t26 + t24; t24 = (t26 - t24) * 0.707106781187;\n\tt18 += t24; t32 += t18; \n\tt18 += t14; t26 = t14 + t24;\n\tt14 = t02 + t16; t02 = (t02 - t16) * 0.509795579104;\n\tt16 = t04 + t20; t04 = (t04 - t20) * 0.601344886935;\n\tt20 = t28 + t22; t22 = (t28 - t22) * 0.899976223136;\n\tt28 = t08 + t10; t10 = (t08 - t10) * 2.56291544774;\n\tt08 = t14 + t28; t14 = (t14 - t28) * 0.541196100146;\n\tt28 = t16 + t20; t20 = (t16 - t20) * 1.30656296488;\n\tt16 = t08 + t28; t28 = (t08 - t28) * 0.707106781187;\n\tt08 = t14 + t20; t20 = (t14 - t20) * 0.707106781187;\n\tt08 += t20;\n\tt14 = t02 + t10; t02 = (t02 - t10) * 0.541196100146;\n\tt10 = t04 + t22; t22 = (t04 - t22) * 1.30656296488;\n\tt04 = t14 + t10; t10 = (t14 - t10) * 0.707106781187;\n\tt14 = t02 + t22; t02 = (t02 - t22) * 0.707106781187;\n\tt14 += t02;\tt04 += t14;\tt14 += t10;\tt10 += t02;\n\tt16 += t04;\tt04 += t08;\tt08 += t14;\tt14 += t28;\n\tt28 += t10;\tt10 += t20;\tt20 += t02;\tt21 += t16;\n\tt16 += t32;\tt32 += t04;\tt04 += t06;\tt06 += t08;\n\tt08 += t18;\tt18 += t14;\tt14 += t30;\tt30 += t28;\n\tt28 += t26;\tt26 += t10;\tt10 += t12;\tt12 += t20;\n\tt20 += t24;\tt24 += t02;\n\n\td[dp + 48] = -t33;\n\td[dp + 49] = d[dp + 47] = -t21;\n\td[dp + 50] = d[dp + 46] = -t17;\n\td[dp + 51] = d[dp + 45] = -t16;\n\td[dp + 52] = d[dp + 44] = -t01;\n\td[dp + 53] = d[dp + 43] = -t32;\n\td[dp + 54] = d[dp + 42] = -t29;\n\td[dp + 55] = d[dp + 41] = -t04;\n\td[dp + 56] = d[dp + 40] = -t03;\n\td[dp + 57] = d[dp + 39] = -t06;\n\td[dp + 58] = d[dp + 38] = -t25;\n\td[dp + 59] = d[dp + 37] = -t08;\n\td[dp + 60] = d[dp + 36] = -t11;\n\td[dp + 61] = d[dp + 35] = -t18;\n\td[dp + 62] = d[dp + 34] = -t09;\n\td[dp + 63] = d[dp + 33] = -t14;\n\td[dp + 32] = -t05;\n\td[dp +  0] = t05; d[dp + 31] = -t30;\n\td[dp +  1] = t30; d[dp + 30] = -t27;\n\td[dp +  2] = t27; d[dp + 29] = -t28;\n\td[dp +  3] = t28; d[dp + 28] = -t07;\n\td[dp +  4] = t07; d[dp + 27] = -t26;\n\td[dp +  5] = t26; d[dp + 26] = -t23;\n\td[dp +  6] = t23; d[dp + 25] = -t10;\n\td[dp +  7] = t10; d[dp + 24] = -t15;\n\td[dp +  8] = t15; d[dp + 23] = -t12;\n\td[dp +  9] = t12; d[dp + 22] = -t19;\n\td[dp + 10] = t19; d[dp + 21] = -t20;\n\td[dp + 11] = t20; d[dp + 20] = -t13;\n\td[dp + 12] = t13; d[dp + 19] = -t24;\n\td[dp + 13] = t24; d[dp + 18] = -t31;\n\td[dp + 14] = t31; d[dp + 17] = -t02;\n\td[dp + 15] = t02; d[dp + 16] =  0.0;\n};\n\nMP2.FRAME_SYNC = 0x7ff;\n\nMP2.VERSION = {\n\tMPEG_2_5: 0x0,\n\tMPEG_2: 0x2,\n\tMPEG_1: 0x3\n};\n\nMP2.LAYER = {\n\tIII: 0x1,\n\tII: 0x2,\n\tI: 0x3\n};\n\nMP2.MODE = {\n\tSTEREO: 0x0,\n\tJOINT_STEREO: 0x1,\n\tDUAL_CHANNEL: 0x2,\n\tMONO: 0x3\n};\n\nMP2.SAMPLE_RATE = new Uint16Array([\n\t44100, 48000, 32000, 0, // MPEG-1\n\t22050, 24000, 16000, 0  // MPEG-2\n]);\n\nMP2.BIT_RATE = new Uint16Array([\n\t32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, // MPEG-1\n\t 8, 16, 24, 32, 40, 48,  56,  64,  80,  96, 112, 128, 144, 160  // MPEG-2\n]);\n\nMP2.SCALEFACTOR_BASE = new Uint32Array([\n\t0x02000000, 0x01965FEA, 0x01428A30\n]);\n\nMP2.SYNTHESIS_WINDOW = new Float32Array([\n\t     0.0,     -0.5,     -0.5,     -0.5,     -0.5,     -0.5,\n\t    -0.5,     -1.0,     -1.0,     -1.0,     -1.0,     -1.5,\n\t    -1.5,     -2.0,     -2.0,     -2.5,     -2.5,     -3.0,\n\t    -3.5,     -3.5,     -4.0,     -4.5,     -5.0,     -5.5,\n\t    -6.5,     -7.0,     -8.0,     -8.5,     -9.5,    -10.5,\n\t   -12.0,    -13.0,    -14.5,    -15.5,    -17.5,    -19.0,\n\t   -20.5,    -22.5,    -24.5,    -26.5,    -29.0,    -31.5,\n\t   -34.0,    -36.5,    -39.5,    -42.5,    -45.5,    -48.5,\n\t   -52.0,    -55.5,    -58.5,    -62.5,    -66.0,    -69.5,\n\t   -73.5,    -77.0,    -80.5,    -84.5,    -88.0,    -91.5,\n\t   -95.0,    -98.0,   -101.0,   -104.0,    106.5,    109.0,\n\t   111.0,    112.5,    113.5,    114.0,    114.0,    113.5,\n\t   112.0,    110.5,    107.5,    104.0,    100.0,     94.5,\n\t    88.5,     81.5,     73.0,     63.5,     53.0,     41.5,\n\t    28.5,     14.5,     -1.0,    -18.0,    -36.0,    -55.5,\n\t   -76.5,    -98.5,   -122.0,   -147.0,   -173.5,   -200.5,\n\t  -229.5,   -259.5,   -290.5,   -322.5,   -355.5,   -389.5,\n\t  -424.0,   -459.5,   -495.5,   -532.0,   -568.5,   -605.0,\n\t  -641.5,   -678.0,   -714.0,   -749.0,   -783.5,   -817.0,\n\t  -849.0,   -879.5,   -908.5,   -935.0,   -959.5,   -981.0,\n\t -1000.5,  -1016.0,  -1028.5,  -1037.5,  -1042.5,  -1043.5,\n\t -1040.0,  -1031.5,   1018.5,   1000.0,    976.0,    946.5,\n\t   911.0,    869.5,    822.0,    767.5,    707.0,    640.0,\n\t   565.5,    485.0,    397.0,    302.5,    201.0,     92.5,\n\t   -22.5,   -144.0,   -272.5,   -407.0,   -547.5,   -694.0,\n\t  -846.0,  -1003.0,  -1165.0,  -1331.5,  -1502.0,  -1675.5,\n\t -1852.5,  -2031.5,  -2212.5,  -2394.0,  -2576.5,  -2758.5,\n\t -2939.5,  -3118.5,  -3294.5,  -3467.5,  -3635.5,  -3798.5,\n\t -3955.0,  -4104.5,  -4245.5,  -4377.5,  -4499.0,  -4609.5,\n\t -4708.0,  -4792.5,  -4863.5,  -4919.0,  -4958.0,  -4979.5,\n\t -4983.0,  -4967.5,  -4931.5,  -4875.0,  -4796.0,  -4694.5,\n\t -4569.5,  -4420.0,  -4246.0,  -4046.0,  -3820.0,  -3567.0,\n\t  3287.0,   2979.5,   2644.0,   2280.5,   1888.0,   1467.5,\n\t  1018.5,    541.0,     35.0,   -499.0,  -1061.0,  -1650.0,\n\t -2266.5,  -2909.0,  -3577.0,  -4270.0,  -4987.5,  -5727.5,\n\t -6490.0,  -7274.0,  -8077.5,  -8899.5,  -9739.0, -10594.5,\n\t-11464.5, -12347.0, -13241.0, -14144.5, -15056.0, -15973.5,\n\t-16895.5, -17820.0, -18744.5, -19668.0, -20588.0, -21503.0,\n\t-22410.5, -23308.5, -24195.0, -25068.5, -25926.5, -26767.0,\n\t-27589.0, -28389.0, -29166.5, -29919.0, -30644.5, -31342.0,\n\t-32009.5, -32645.0, -33247.0, -33814.5, -34346.0, -34839.5,\n\t-35295.0, -35710.0, -36084.5, -36417.5, -36707.5, -36954.0,\n\t-37156.5, -37315.0, -37428.0, -37496.0,  37519.0,  37496.0,\n\t 37428.0,  37315.0,  37156.5,  36954.0,  36707.5,  36417.5,\n\t 36084.5,  35710.0,  35295.0,  34839.5,  34346.0,  33814.5,\n\t 33247.0,  32645.0,  32009.5,  31342.0,  30644.5,  29919.0,\n\t 29166.5,  28389.0,  27589.0,  26767.0,  25926.5,  25068.5,\n\t 24195.0,  23308.5,  22410.5,  21503.0,  20588.0,  19668.0,\n\t 18744.5,  17820.0,  16895.5,  15973.5,  15056.0,  14144.5,\n\t 13241.0,  12347.0,  11464.5,  10594.5,   9739.0,   8899.5,\n\t  8077.5,   7274.0,   6490.0,   5727.5,   4987.5,   4270.0,\n\t  3577.0,   2909.0,   2266.5,   1650.0,   1061.0,    499.0,\n\t   -35.0,   -541.0,  -1018.5,  -1467.5,  -1888.0,  -2280.5,\n\t -2644.0,  -2979.5,   3287.0,   3567.0,   3820.0,   4046.0,\n\t  4246.0,   4420.0,   4569.5,   4694.5,   4796.0,   4875.0,\n\t  4931.5,   4967.5,   4983.0,   4979.5,   4958.0,   4919.0,\n\t  4863.5,   4792.5,   4708.0,   4609.5,   4499.0,   4377.5,\n\t  4245.5,   4104.5,   3955.0,   3798.5,   3635.5,   3467.5,\n\t  3294.5,   3118.5,   2939.5,   2758.5,   2576.5,   2394.0,\n\t  2212.5,   2031.5,   1852.5,   1675.5,   1502.0,   1331.5,\n\t  1165.0,   1003.0,    846.0,    694.0,    547.5,    407.0,\n\t   272.5,    144.0,     22.5,    -92.5,   -201.0,   -302.5,\n\t  -397.0,   -485.0,   -565.5,   -640.0,   -707.0,   -767.5,\n\t  -822.0,   -869.5,   -911.0,   -946.5,   -976.0,  -1000.0,\n\t  1018.5,   1031.5,   1040.0,   1043.5,   1042.5,   1037.5,\n\t  1028.5,   1016.0,   1000.5,    981.0,    959.5,    935.0,\n\t   908.5,    879.5,    849.0,    817.0,    783.5,    749.0,\n\t   714.0,    678.0,    641.5,    605.0,    568.5,    532.0,\n\t   495.5,    459.5,    424.0,    389.5,    355.5,    322.5,\n\t   290.5,    259.5,    229.5,    200.5,    173.5,    147.0,\n\t   122.0,     98.5,     76.5,     55.5,     36.0,     18.0,\n\t\t1.0,    -14.5,    -28.5,    -41.5,    -53.0,    -63.5,\n\t   -73.0,    -81.5,    -88.5,    -94.5,   -100.0,   -104.0,\n\t  -107.5,   -110.5,   -112.0,   -113.5,   -114.0,   -114.0,\n\t  -113.5,   -112.5,   -111.0,   -109.0,    106.5,    104.0,\n\t   101.0,     98.0,     95.0,     91.5,     88.0,     84.5,\n\t    80.5,     77.0,     73.5,     69.5,     66.0,     62.5,\n\t    58.5,     55.5,     52.0,     48.5,     45.5,     42.5,\n\t    39.5,     36.5,     34.0,     31.5,     29.0,     26.5,\n\t    24.5,     22.5,     20.5,     19.0,     17.5,     15.5,\n\t    14.5,     13.0,     12.0,     10.5,      9.5,      8.5,\n\t     8.0,      7.0,      6.5,      5.5,      5.0,      4.5,\n\t     4.0,      3.5,      3.5,      3.0,      2.5,      2.5,\n\t     2.0,      2.0,      1.5,      1.5,      1.0,      1.0,\n\t     1.0,      1.0,      0.5,      0.5,      0.5,      0.5,\n\t     0.5,      0.5\n]);\n\n// Quantizer lookup, step 1: bitrate classes\nMP2.QUANT_LUT_STEP_1 = [\n \t// 32, 48, 56, 64, 80, 96,112,128,160,192,224,256,320,384 <- bitrate\n\t[   0,  0,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  2], // mono\n\t// 16, 24, 28, 32, 40, 48, 56, 64, 80, 96,112,128,160,192 <- bitrate / chan\n\t[   0,  0,  0,  0,  0,  0,  1,  1,  1,  2,  2,  2,  2,  2] // stereo\n];\n\n// Quantizer lookup, step 2: bitrate class, sample rate -> B2 table idx, sblimit\nMP2.QUANT_TAB = {\n\tA: (27 | 64), // Table 3-B.2a: high-rate, sblimit = 27\n\tB: (30 | 64), // Table 3-B.2b: high-rate, sblimit = 30\n\tC:   8,       // Table 3-B.2c:  low-rate, sblimit =  8\n\tD:  12        // Table 3-B.2d:  low-rate, sblimit = 12\n};\n\nMP2.QUANT_LUT_STEP_2 = [\n\t//   44.1 kHz,        48 kHz,          32 kHz\n\t[MP2.QUANT_TAB.C, MP2.QUANT_TAB.C, MP2.QUANT_TAB.D], // 32 - 48 kbit/sec/ch\n\t[MP2.QUANT_TAB.A, MP2.QUANT_TAB.A, MP2.QUANT_TAB.A], // 56 - 80 kbit/sec/ch\n\t[MP2.QUANT_TAB.B, MP2.QUANT_TAB.A, MP2.QUANT_TAB.B]  // 96+\t kbit/sec/ch\n];\n\n// Quantizer lookup, step 3: B2 table, subband -> nbal, row index\n// (upper 4 bits: nbal, lower 4 bits: row index)\nMP2.QUANT_LUT_STEP_3 = [\n\t// Low-rate table (3-B.2c and 3-B.2d)\n\t[\n\t\t0x44,0x44,\n\t  \t0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x34,0x34\n\t],\n\t// High-rate table (3-B.2a and 3-B.2b)\n\t[\n\t\t0x43,0x43,0x43,\n\t\t0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,\n\t\t0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,0x31,\n\t\t0x20,0x20,0x20,0x20,0x20,0x20,0x20\n\t],\n\t// MPEG-2 LSR table (B.2 in ISO 13818-3)\n\t[\n\t\t0x45,0x45,0x45,0x45,\n\t\t0x34,0x34,0x34,0x34,0x34,0x34,0x34,\n\t\t0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,\n\t\t\t\t\t   0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24,0x24\t\n\t]\n];\n\n// Quantizer lookup, step 4: table row, allocation[] value -> quant table index\nMP2.QUANT_LUT_STEP4 = [\n\t[0, 1, 2, 17],\n\t[0, 1, 2, 3, 4, 5, 6, 17],\n\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17],\n\t[0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17],\n\t[0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17],\n\t[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n];\n\nMP2.QUANT_TAB = [\n\t{levels:     3, group: 1, bits:  5},  //  1\n\t{levels:     5, group: 1, bits:  7},  //  2\n\t{levels:     7, group: 0, bits:  3},  //  3\n\t{levels:     9, group: 1, bits: 10},  //  4\n\t{levels:    15, group: 0, bits:  4},  //  5\n\t{levels:    31, group: 0, bits:  5},  //  6\n\t{levels:    63, group: 0, bits:  6},  //  7\n\t{levels:   127, group: 0, bits:  7},  //  8\n\t{levels:   255, group: 0, bits:  8},  //  9\n\t{levels:   511, group: 0, bits:  9},  // 10\n\t{levels:  1023, group: 0, bits: 10},  // 11\n\t{levels:  2047, group: 0, bits: 11},  // 12\n\t{levels:  4095, group: 0, bits: 12},  // 13\n\t{levels:  8191, group: 0, bits: 13},  // 14\n\t{levels: 16383, group: 0, bits: 14},  // 15\n\t{levels: 32767, group: 0, bits: 15},  // 16\n\t{levels: 65535, group: 0, bits: 16}   // 17\n];\n\nreturn MP2;\n\n})();\n\n","JSMpeg.Renderer.WebGL = (function(){ \"use strict\";\n\nvar WebGLRenderer = function(options) {\n\tthis.canvas = options.canvas || document.createElement('canvas');\n\tthis.width = this.canvas.width;\n\tthis.height = this.canvas.height;\n\tthis.enabled = true;\n\n\tvar contextCreateOptions = {\n\t\tpreserveDrawingBuffer: !!options.preserveDrawingBuffer,\n\t\talpha: false,\n\t\tdepth: false,\n\t\tstencil: false,\n\t\tantialias: false\n\t};\n\n\tthis.gl = \n\t\tthis.canvas.getContext('webgl', contextCreateOptions) || \n\t\tthis.canvas.getContext('experimental-webgl', contextCreateOptions);\n\n\tif (!this.gl) {\n\t\tthrow new Error('Failed to get WebGL Context');\n\t}\n\n\tvar gl = this.gl;\n\tvar vertexAttr = null;\n\n\t// Init buffers\n\tthis.vertexBuffer = gl.createBuffer();\n\tvar vertexCoords = new Float32Array([0, 0, 0, 1, 1, 0, 1, 1]);\n\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\tgl.bufferData(gl.ARRAY_BUFFER, vertexCoords, gl.STATIC_DRAW);\n\n\t// Setup the main YCrCbToRGBA shader\n\tthis.program = this.createProgram(\n\t\tWebGLRenderer.SHADER.VERTEX_IDENTITY,\n\t\tWebGLRenderer.SHADER.FRAGMENT_YCRCB_TO_RGBA\n\t);\n\tvertexAttr = gl.getAttribLocation(this.program, 'vertex');\n\tgl.enableVertexAttribArray(vertexAttr);\n\tgl.vertexAttribPointer(vertexAttr, 2, gl.FLOAT, false, 0, 0);\n\n\tthis.textureY = this.createTexture(0, 'textureY');\n\tthis.textureCb = this.createTexture(1, 'textureCb');\n\tthis.textureCr = this.createTexture(2, 'textureCr');\n\n\n\t// Setup the loading animation shader\n\tthis.loadingProgram = this.createProgram(\n\t\tWebGLRenderer.SHADER.VERTEX_IDENTITY,\n\t\tWebGLRenderer.SHADER.FRAGMENT_LOADING\n\t);\n\tvertexAttr = gl.getAttribLocation(this.loadingProgram, 'vertex');\n\tgl.enableVertexAttribArray(vertexAttr);\n\tgl.vertexAttribPointer(vertexAttr, 2, gl.FLOAT, false, 0, 0);\n\n\tthis.shouldCreateUnclampedViews = !this.allowsClampedTextureData();\n};\n\nWebGLRenderer.prototype.destroy = function() {\n\tvar gl = this.gl;\n\t\n\tgl.deleteTexture(this.textureY);\n\tgl.deleteTexture(this.textureCb);\n\tgl.deleteTexture(this.textureCr);\n\n\tgl.deleteProgram(this.program);\n\tgl.deleteProgram(this.loadingProgram);\n\n\tgl.deleteBuffer(this.vertexBuffer);\n};\n\nWebGLRenderer.prototype.resize = function(width, height) {\n\tthis.width = width|0;\n\tthis.height = height|0;\n\n\tthis.canvas.width = this.width;\n\tthis.canvas.height = this.height;\n\n\tthis.gl.useProgram(this.program);\n\tthis.gl.viewport(0, 0, this.width, this.height);\n};\n\nWebGLRenderer.prototype.createTexture = function(index, name) {\n\tvar gl = this.gl;\n\tvar texture = gl.createTexture();\n\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\tgl.uniform1i(gl.getUniformLocation(this.program, name), index);\n\n\treturn texture;\n};\n\nWebGLRenderer.prototype.createProgram = function(vsh, fsh) {\n\tvar gl = this.gl;\n\tvar program = gl.createProgram();\n\n\tgl.attachShader(program, this.compileShader(gl.VERTEX_SHADER, vsh));\n\tgl.attachShader(program, this.compileShader(gl.FRAGMENT_SHADER, fsh));\n\tgl.linkProgram(program);\n\tgl.useProgram(program);\n\n\treturn program;\n};\n\nWebGLRenderer.prototype.compileShader = function(type, source) {\n\tvar gl = this.gl;\n\tvar shader = gl.createShader(type);\n\tgl.shaderSource(shader, source);\n\tgl.compileShader(shader);\n\n\tif (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(gl.getShaderInfoLog(shader));\n\t}\n\n\treturn shader;\n};\n\nWebGLRenderer.prototype.allowsClampedTextureData = function() {\n\tvar gl = this.gl;\n\tvar texture = gl.createTexture();\n\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D, 0, gl.LUMINANCE, 1, 1, 0,\n\t\tgl.LUMINANCE, gl.UNSIGNED_BYTE, new Uint8ClampedArray([0])\n\t);\n\treturn (gl.getError() === 0);\n};\n\nWebGLRenderer.prototype.renderProgress = function(progress) {\n\tvar gl = this.gl;\n\n\tgl.useProgram(this.loadingProgram);\n\n\tvar loc = gl.getUniformLocation(this.loadingProgram, 'progress');\n\tgl.uniform1f(loc, progress);\n\t\n\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n};\n\nWebGLRenderer.prototype.render = function(y, cb, cr) {\n\tif (!this.enabled) {\n\t\treturn;\n\t}\n\n\tvar gl = this.gl;\n\tvar w = ((this.width + 15) >> 4) << 4,\n\t\th = this.height,\n\t\tw2 = w >> 1,\n\t\th2 = h >> 1;\n\n\t// In some browsers WebGL doesn't like Uint8ClampedArrays (this is a bug\n\t// and should be fixed soon-ish), so we have to create a Uint8Array view \n\t// for each plane.\n\tif (this.shouldCreateUnclampedViews) {\n\t\ty = new Uint8Array(y.buffer),\n\t\tcb = new Uint8Array(cb.buffer),\n\t\tcr = new Uint8Array(cr.buffer);\t\n\t}\n\n\tgl.useProgram(this.program);\n\n\tthis.updateTexture(gl.TEXTURE0, this.textureY, w, h, y);\n\tthis.updateTexture(gl.TEXTURE1, this.textureCb, w2, h2, cb);\n\tthis.updateTexture(gl.TEXTURE2, this.textureCr, w2, h2, cr);\n\n\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n};\n\nWebGLRenderer.prototype.renderJpeg = function(image) {\n\tif (!this.enabled) {\n\t\treturn;\n\t}\n\n\tvar gl = this.gl;\n\n\tif (!this.imageProgram) {\n\t\tthis.imageProgram = this.createProgram(\n\t\t\tWebGLRenderer.SHADER.VERTEX_IDENTITY,\n\t\t\tWebGLRenderer.SHADER.FRAGMENT_IMAGE\n\t\t);\n\n\t\tvar vertexAttr = gl.getAttribLocation(this.imageProgram, 'vertex');\n\t\tgl.enableVertexAttribArray(vertexAttr);\n\t\tgl.vertexAttribPointer(vertexAttr, 2, gl.FLOAT, false, 0, 0);\n\n\t\tthis.textureImage = gl.createTexture();\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.textureImage);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tthis.imageProgram.imageUniform = gl.getUniformLocation(this.imageProgram, 'textureImage');\n\t}\n\n\tgl.useProgram(this.imageProgram);\n\tthis.updateTextureImage(gl.TEXTURE0, this.textureImage, image);\n\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n};\n\n/*\n\nWebGLRenderer.prototype.drawImage= function(image) {\n\n\tfunction loadImageAndCreateTextureInfo(jpegData) {\n\t\tvar tex = gl.createTexture();\n\t\tgl.bindTexture(gl.TEXTURE_2D, tex);\n\t\t// Fill the texture with a 1x1 blue pixel.\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n\t\t\t\tnew Uint8Array([0, 0, 255, 255]));\n\n\t\t// let's assume all images are not a power of 2\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n\t\tvar textureInfo = {\n\t\t\twidth: 1,   // we don't know the size until it loads\n\t\t\theight: 1,\n\t\t\ttexture: tex,\n\t\t};\n\n\t\tvar img = new Image();\n\t\timg.addEventListener('load', function() {\n\t\t\ttextureInfo.width = img.width;\n\t\t\ttextureInfo.height = img.height;\n\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, textureInfo.texture);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);\n\t\t});\n\t\timg.src = 'data:image/png;base64,'+this.jpgEncode(jpegData);\n\n\t\treturn textureInfo;\n\t}\n\n\tfunction drawImage(tex, texWidth, texHeight, dstX, dstY) {\n\t\tgl.bindTexture(gl.TEXTURE_2D, tex);\n\n\t\t// Tell WebGL to use our shader program pair\n\t\tgl.useProgram(program);\n\n\t\t// Setup the attributes to pull data from our buffers\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n\t\tgl.enableVertexAttribArray(positionLocation);\n\t\tgl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, texcoordBuffer);\n\t\tgl.enableVertexAttribArray(texcoordLocation);\n\t\tgl.vertexAttribPointer(texcoordLocation, 2, gl.FLOAT, false, 0, 0);\n\n\t\t// this matirx will convert from pixels to clip space\n\t\tvar matrix = m4.orthographic(0, gl.canvas.width, gl.canvas.height, 0, -1, 1);\n\n\t\t// this matrix will translate our quad to dstX, dstY\n\t\tmatrix = m4.translate(matrix, dstX, dstY, 0);\n\n\t\t// this matrix will scale our 1 unit quad\n\t\t// from 1 unit to texWidth, texHeight units\n\t\tmatrix = m4.scale(matrix, texWidth, texHeight, 1);\n\n\t\t// Set the matrix.\n\t\tgl.uniformMatrix4fv(matrixLocation, false, matrix);\n\n\t\t// Tell the shader to get the texture from texture unit 0\n\t\tgl.uniform1i(textureLocation, 0);\n\n\t\t// draw the quad (2 triangles, 6 vertices)\n\t\tgl.drawArrays(gl.TRIANGLES, 0, 6);\n\t}\n\n\n\n\n};\n*/\n\nWebGLRenderer.prototype.updateTextureImage = function(unit, texture, image) {\n\tvar gl = this.gl;\n\tgl.activeTexture(unit);\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n}\n\nWebGLRenderer.prototype.updateTexture = function(unit, texture, w, h, data) {\n\tvar gl = this.gl;\n\tgl.activeTexture(unit);\n\tgl.bindTexture(gl.TEXTURE_2D, texture);\n\tgl.texImage2D(\n\t\tgl.TEXTURE_2D, 0, gl.LUMINANCE, w, h, 0, \n\t\tgl.LUMINANCE, gl.UNSIGNED_BYTE, data\n\t);\n}\n\nWebGLRenderer.prototype.jpgEncode = function (input) {\n\tvar keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\tvar output = \"\";\n\tvar chr1, chr2, chr3, enc1, enc2, enc3, enc4;\n\tvar i = 0;\n\n\twhile (i < input.length) {\n\t\tchr1 = input[i++];\n\t\tchr2 = i < input.length ? input[i++] : Number.NaN; // Not sure if the index \n\t\tchr3 = i < input.length ? input[i++] : Number.NaN; // checks are needed here\n\n\t\tenc1 = chr1 >> 2;\n\t\tenc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n\t\tenc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n\t\tenc4 = chr3 & 63;\n\n\t\tif (isNaN(chr2)) {\n\t\t\tenc3 = enc4 = 64;\n\t\t} else if (isNaN(chr3)) {\n\t\t\tenc4 = 64;\n\t\t}\n\t\toutput += keyStr.charAt(enc1) + keyStr.charAt(enc2) +\n\t\t\tkeyStr.charAt(enc3) + keyStr.charAt(enc4);\n\t}\n\treturn output;\n};\n\nWebGLRenderer.IsSupported = function() {\n\ttry {\n\t\tif (!window.WebGLRenderingContext) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar canvas = document.createElement('canvas'); \n\t\treturn !!(\n\t\t\tcanvas.getContext('webgl') || \n\t\t\tcanvas.getContext('experimental-webgl')\n\t\t);\n\t}\n\tcatch (err) {\n\t\treturn false;\n\t} \n};\n\nWebGLRenderer.SHADER = {\n\tFRAGMENT_IMAGE : [\n\t\t'precision mediump float;',\n\t\t'uniform sampler2D textureImage;',\n\t\t'varying vec2 texCoord;',\n\n\t\t'void main() {',\n\t\t\t'gl_FragColor = texture2D(textureImage, texCoord);',\n\t\t'}'\n\t].join('\\n'),\n\n\tFRAGMENT_YCRCB_TO_RGBA: [\n\t\t'precision mediump float;',\n\t\t'uniform sampler2D textureY;',\n\t\t'uniform sampler2D textureCb;',\n\t\t'uniform sampler2D textureCr;',\n\t\t'varying vec2 texCoord;',\n\n\t\t'mat4 rec601 = mat4(',\n\t\t\t'1.16438,  0.00000,  1.59603, -0.87079,',\n\t\t\t'1.16438, -0.39176, -0.81297,  0.52959,',\n\t\t\t'1.16438,  2.01723,  0.00000, -1.08139,',\n\t\t\t'0, 0, 0, 1',\n\t\t');',\n\n\t\t'void main() {',\n\t\t\t'float y = texture2D(textureY, texCoord).r;',\n\t\t\t'float cb = texture2D(textureCb, texCoord).r;',\n\t\t\t'float cr = texture2D(textureCr, texCoord).r;',\n\n\t\t\t'gl_FragColor = vec4(y, cr, cb, 1.0) * rec601;',\n\t\t'}'\n\t].join('\\n'),\n\n\tFRAGMENT_LOADING: [\n\t\t'precision mediump float;',\n\t\t'uniform float progress;',\n\t\t'varying vec2 texCoord;',\n\n\t\t'void main() {',\n\t\t\t'float c = ceil(progress-(1.0-texCoord.y));',\n\t\t\t'gl_FragColor = vec4(c,c,c,1);',\n\t\t'}'\n\t].join('\\n'),\n\n\tVERTEX_IDENTITY: [\n\t\t'attribute vec2 vertex;',\n\t\t'varying vec2 texCoord;',\n\n\t\t'void main() {',\n\t\t\t'texCoord = vertex;',\n\t\t\t'gl_Position = vec4((vertex * 2.0 - 1.0) * vec2(1, -1), 0.0, 1.0);',\n\t\t'}'\n\t].join('\\n')\n};\n\nreturn WebGLRenderer;\n\n})();\n\n","JSMpeg.Renderer.Canvas2D = (function(){ \"use strict\";\n\nvar CanvasRenderer = function(options) {\n\tthis.canvas = options.canvas || document.createElement('canvas');\n\tthis.width = this.canvas.width;\n\tthis.height = this.canvas.height;\n\tthis.enabled = true;\n\n\tthis.context = this.canvas.getContext('2d');\n};\n\nCanvasRenderer.prototype.destroy = function() {\n\t// Nothing to do here\n};\n\nCanvasRenderer.prototype.resize = function(width, height) {\n\tthis.width = width|0;\n\tthis.height = height|0;\n\n\tthis.canvas.width = this.width;\n\tthis.canvas.height = this.height;\n\n\tthis.imageData = this.context.getImageData(0, 0, this.width, this.height);\n\tJSMpeg.Fill(this.imageData.data, 255);\n};\n\nCanvasRenderer.prototype.renderProgress = function(progress) {\n\tvar \n\t\tw = this.canvas.width,\n\t\th = this.canvas.height,\n\t\tctx = this.context;\n\n\tctx.fillStyle = '#222';\n\tctx.fillRect(0, 0, w, h);\n\tctx.fillStyle = '#fff';\n\tctx.fillRect(0, h - h * progress, w, h * progress);\n};\n\nCanvasRenderer.prototype.render = function(y, cb, cr) {\n\tthis.YCbCrToRGBA(y, cb, cr, this.imageData.data);\n\tthis.context.putImageData(this.imageData, 0, 0);\n};\n\nCanvasRenderer.prototype.renderJpeg = function(image) {\n\tvar ctx = this.context;\n\tctx.canvas.width = image.width;\n\tctx.canvas.height = image.height;\n\tctx.drawImage(image, 0, 0);\n};\n\nCanvasRenderer.prototype.YCbCrToRGBA = function(y, cb, cr, rgba) {\n\tif (!this.enabled) {\n\t\treturn;\n\t}\n\n\t// Chroma values are the same for each block of 4 pixels, so we proccess\n\t// 2 lines at a time, 2 neighboring pixels each.\n\t// I wish we could use 32bit writes to the RGBA buffer instead of writing\n\t// each byte separately, but we need the automatic clamping of the RGBA\n\t// buffer.\n\t\n\tvar w = ((this.width + 15) >> 4) << 4,\n\t\tw2 = w >> 1;\n\n\tvar yIndex1 = 0,\n\t\tyIndex2 = w,\n\t\tyNext2Lines = w + (w - this.width);\n\n\tvar cIndex = 0,\n\t\tcNextLine = w2 - (this.width >> 1);\n\n\tvar rgbaIndex1 = 0,\n\t\trgbaIndex2 = this.width * 4,\n\t\trgbaNext2Lines = this.width * 4;\n\n\tvar cols = this.width >> 1,\n\t\trows = this.height >> 1;\n\n\tvar ccb, ccr, r, g, b;\n\n\tfor (var row = 0; row < rows; row++) {\n\t\tfor (var col = 0; col < cols; col++) {\n\t\t\tccb = cb[cIndex];\n\t\t\tccr = cr[cIndex];\n\t\t\tcIndex++;\n\n\t\t\tr = (ccb + ((ccb * 103) >> 8)) - 179;\n\t\t\tg = ((ccr * 88) >> 8) - 44 + ((ccb * 183) >> 8) - 91;\n\t\t\tb = (ccr + ((ccr * 198) >> 8)) - 227;\n\n\t\t\t// Line 1\n\t\t\tvar y1 = y[yIndex1++];\n\t\t\tvar y2 = y[yIndex1++];\n\t\t\trgba[rgbaIndex1]   = y1 + r;\n\t\t\trgba[rgbaIndex1+1] = y1 - g;\n\t\t\trgba[rgbaIndex1+2] = y1 + b;\n\t\t\trgba[rgbaIndex1+4] = y2 + r;\n\t\t\trgba[rgbaIndex1+5] = y2 - g;\n\t\t\trgba[rgbaIndex1+6] = y2 + b;\n\t\t\trgbaIndex1 += 8;\n\n\t\t\t// Line 2\n\t\t\tvar y3 = y[yIndex2++];\n\t\t\tvar y4 = y[yIndex2++];\n\t\t\trgba[rgbaIndex2]   = y3 + r;\n\t\t\trgba[rgbaIndex2+1] = y3 - g;\n\t\t\trgba[rgbaIndex2+2] = y3 + b;\n\t\t\trgba[rgbaIndex2+4] = y4 + r;\n\t\t\trgba[rgbaIndex2+5] = y4 - g;\n\t\t\trgba[rgbaIndex2+6] = y4 + b;\n\t\t\trgbaIndex2 += 8;\n\t\t}\n\n\t\tyIndex1 += yNext2Lines;\n\t\tyIndex2 += yNext2Lines;\n\t\trgbaIndex1 += rgbaNext2Lines;\n\t\trgbaIndex2 += rgbaNext2Lines;\n\t\tcIndex += cNextLine;\n\t}\n};\n\nreturn CanvasRenderer;\n\n})();\n\n\n","JSMpeg.AudioOutput.WebAudio = (function() { \"use strict\";\n\nvar WebAudioOut = function(options) {\n\tthis.context = WebAudioOut.CachedContext =\n\t\tWebAudioOut.CachedContext ||\n\t\tnew (window.AudioContext || window.webkitAudioContext)();\n\n\tthis.gain = this.context.createGain();\n\tthis.destination = this.gain;\n\n\t// Keep track of the number of connections to this AudioContext, so we\n\t// can safely close() it when we're the only one connected to it.\n\tthis.gain.connect(this.context.destination);\n\tthis.context._connections = (this.context._connections || 0) + 1;\n\t\n\tthis.startTime = 0;\n\tthis.buffer = null;\n\tthis.wallclockStartTime = 0;\n\tthis.volume = 1;\n\tthis.enabled = true;\n\n\tthis.unlocked = !WebAudioOut.NeedsUnlocking();\n\t\n\tObject.defineProperty(this, 'enqueuedTime', {get: this.getEnqueuedTime});\n};\n\nWebAudioOut.prototype.destroy = function() {\n\tthis.gain.disconnect();\n\tthis.context._connections--;\n\n\tif (this.context._connections === 0) {\n\t\tthis.context.close();\n\t\tWebAudioOut.CachedContext = null;\n\t}\n};\n\nWebAudioOut.prototype.play = function(sampleRate, left, right) {\n\tif (!this.enabled) {\n\t\treturn;\n\t}\n\n\t// If the context is not unlocked yet, we simply advance the start time\n\t// to \"fake\" actually playing audio. This will keep the video in sync.\n\tif (!this.unlocked) {\n\t\tvar ts = JSMpeg.Now()\n\t\tif (this.wallclockStartTime < ts) {\n\t\t\tthis.wallclockStartTime = ts;\n\t\t}\n\t\tthis.wallclockStartTime += left.length / sampleRate;\n\t\treturn;\n\t}\n\n\n\tthis.gain.gain.value = this.volume;\n\n\tvar buffer = this.context.createBuffer(2, left.length, sampleRate);\n\tbuffer.getChannelData(0).set(left);\n\tbuffer.getChannelData(1).set(right);\n\n\tvar source = this.context.createBufferSource();\n\tsource.buffer = buffer;\n\tsource.connect(this.destination);\n\n\tvar now = this.context.currentTime;\n\tvar duration = buffer.duration;\n\tif (this.startTime < now) {\n\t\tthis.startTime = now;\n\t\tthis.wallclockStartTime = JSMpeg.Now();\n\t}\n\n\tsource.start(this.startTime);\n\tthis.startTime += duration;\n\tthis.wallclockStartTime += duration;\n};\n\nWebAudioOut.prototype.stop = function() {\n\t// Meh; there seems to be no simple way to get a list of currently\n\t// active source nodes from the Audio Context, and maintaining this\n\t// list ourselfs would be a pain, so we just set the gain to 0\n\t// to cut off all enqueued audio instantly.\n\tthis.gain.gain.value = 0;\n};\n\nWebAudioOut.prototype.getEnqueuedTime = function() {\n\t// The AudioContext.currentTime is only updated every so often, so if we\n\t// want to get exact timing, we need to rely on the system time.\n\treturn Math.max(this.wallclockStartTime - JSMpeg.Now(), 0)\n};\n\nWebAudioOut.prototype.resetEnqueuedTime = function() {\n\tthis.startTime = this.context.currentTime;\n\tthis.wallclockStartTime = JSMpeg.Now();\n};\n\nWebAudioOut.prototype.unlock = function(callback) {\n\tif (this.unlocked) {\n\t\tif (callback) {\n\t\t\tcallback();\n\t\t}\n\t\treturn;\n\t}\n\n\tthis.unlockCallback = callback;\n\t\n\t// Create empty buffer and play it\n\tvar buffer = this.context.createBuffer(1, 1, 22050);\n\tvar source = this.context.createBufferSource();\n\tsource.buffer = buffer;\n\tsource.connect(this.destination);\n\tsource.start(0);\n\n\tsetTimeout(this.checkIfUnlocked.bind(this, source, 0), 0);\n};\n\nWebAudioOut.prototype.checkIfUnlocked = function(source, attempt) {\n\tif (\n\t\tsource.playbackState === source.PLAYING_STATE || \n\t\tsource.playbackState === source.FINISHED_STATE\n\t) {\n\t\tthis.unlocked = true;\n\t\tif (this.unlockCallback) {\n\t\t\tthis.unlockCallback();\n\t\t\tthis.unlockCallback = null;\t\n\t\t}\n\t}\n\telse if (attempt < 10) {\n\t\t// Jeez, what a shit show. Thanks iOS!\n\t\tsetTimeout(this.checkIfUnlocked.bind(this, source, attempt+1), 100);\n\t}\n};\n\nWebAudioOut.NeedsUnlocking = function() {\n\treturn /iPhone|iPad|iPod/i.test(navigator.userAgent);\n};\n\nWebAudioOut.IsSupported = function() {\n\treturn (window.AudioContext || window.webkitAudioContext);\n};\n\nWebAudioOut.CachedContext = null;\n\nreturn WebAudioOut;\n\n})();\n\n","/**\n * [js-crc]{@link https://github.com/emn178/js-crc}\n *\n * @namespace crc\n * @version 0.2.0\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\n * @copyright Chen, Yi-Cyuan 2015-2017\n * @license MIT\n */\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_CRC_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n  if (NODE_JS) {\n    root = global;\n  }\n  var COMMON_JS = !root.JS_CRC_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var AMD = typeof define === 'function' && define.amd;\n  var ARRAY_BUFFER = !root.JS_CRC_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n\n  var Modules = [\n    {\n      name: 'crc32',\n      polynom: 0xEDB88320,\n      initValue: -1,\n      bytes: 4\n    }, \n    {\n      name: 'crc16',\n      polynom: 0xA001,\n      initValue: 0,\n      bytes: 2\n    }\n  ];\n\n  var i, j, k, b;\n  for (i = 0; i < Modules.length; ++i) {\n    var m = Modules[i];\n    m.method = (function (m) {\n      return function (message) {\n        return crc(message, m);\n      };\n    })(m);\n    m.table = [];\n    for (j = 0; j < 256; ++j) {\n      b = j;\n      for (k = 0; k < 8; ++k) {\n        b = b & 1 ? m.polynom ^ (b >>> 1) : b >>> 1;\n      }\n      m.table[j] = b >>> 0;\n    }\n  }\n\n  var crc = function (message, module) {\n    var notString = typeof message !== 'string';\n    if (notString && ARRAY_BUFFER && message instanceof ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n\n    var crc = module.initValue, code, i, length = message.length, table = module.table;\n    if (notString) {\n      for (i = 0; i < length; ++i) {\n        crc = table[(crc ^ message[i]) & 0xFF] ^ (crc >>> 8);\n      }\n    } else {\n      for (i = 0; i < length; ++i) {\n        code = message.charCodeAt(i);\n        if (code < 0x80) {\n          crc = table[(crc ^ code) & 0xFF] ^ (crc >>> 8);\n        } else if (code < 0x800) {\n          crc = table[(crc ^ (0xc0 | (code >> 6))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | (code & 0x3f))) & 0xFF] ^ (crc >>> 8);\n        } else if (code < 0xd800 || code >= 0xe000) {\n          crc = table[(crc ^ (0xe0 | (code >> 12))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | ((code >> 6) & 0x3f))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | (code & 0x3f))) & 0xFF] ^ (crc >>> 8);\n        } else {\n          code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++i) & 0x3ff));\n          crc = table[(crc ^ (0xf0 | (code >> 18))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | ((code >> 12) & 0x3f))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | ((code >> 6) & 0x3f))) & 0xFF] ^ (crc >>> 8);\n          crc = table[(crc ^ (0x80 | (code & 0x3f))) & 0xFF] ^ (crc >>> 8);\n        }\n      }\n    }\n    crc ^= module.initValue;\n\n    var hex = '';\n    if (module.bytes > 2) {\n      hex += HEX_CHARS[(crc >> 28) & 0x0F] + HEX_CHARS[(crc >> 24) & 0x0F] +\n             HEX_CHARS[(crc >> 20) & 0x0F] + HEX_CHARS[(crc >> 16) & 0x0F];\n    }\n    hex += HEX_CHARS[(crc >> 12) & 0x0F] + HEX_CHARS[(crc >> 8) & 0x0F] +\n           HEX_CHARS[(crc >> 4) & 0x0F] + HEX_CHARS[crc & 0x0F];\n    return hex;\n  };\n\n  var exports = {};\n  for (i = 0;i < Modules.length;++i) {\n    var m = Modules[i];\n    exports[m.name] = m.method;\n  }\n  if (COMMON_JS) {\n    module.exports = exports;\n  } else {\n    for (i = 0;i < Modules.length;++i) {\n      var m = Modules[i];\n      root[m.name] = m.method;\n    }\n    if (AMD) {\n      define(function() {\n        return exports;\n      });\n    }\n  }\n})();\n"]}